Name: microsoft/autogen
Description: AutoGen is a comprehensive Python framework developed by Microsoft for creating autonomous multi-agent AI applications. It provides a layered design that allows developers to work at different levels of abstraction, from high-level APIs to low-level message passing. The framework includes various modules like AgentChat API, Extensions API, and AutoGen Studio for no-code GUI prototyping, enabling rapid development and testing. With support for models like OpenAI's GPT-4o, it facilitates the creation, management, and orchestration of multi-agent teams in diverse real-world applications.

Name: infiniflow/ragflow
Description: RAGFlow leverages advanced retrieval-augmented generation to process and analyze unstructured business data across varied formats. It employs deep document understanding to extract meaningful insights and grounded citations for enhanced reliability. The engine supports multiple data formats and integrates with LLMs to provide accurate question-answering capabilities. The project also emphasizes template-based document chunking and offers a streamlined workflow for both personal and enterprise applications. Its modular design makes integration and deployment straightforward with Docker and other modern tooling.

Name: crewAIInc/crewAI
Description: CrewAI enables developers to build sophisticated multi-agent systems using a production-grade framework that combines dynamic team collaboration through crews with controlled automations via flows. The framework supports seamless integration of AI agents with traditional Python code, leveraging YAML configurations for defining agents and tasks. It is designed to cater to a broad range of applications, from smart assistant platforms to automated customer service ensembles. With extensive documentation, learning resources, and a robust enterprise edition, CrewAI addresses both development and deployment needs while ensuring scalability and security.

Name: agno-agi/agno
Description: Agno is a Python library that simplifies the development of high-performance, multi-modal agents. It supports a wide range of functionalities including tool integration for web search, financial data, and knowledge bases for agentic retrieval-augmented generation (RAG). The library emphasizes simplicity, a minimal memory footprint, and blazing fast agent instantiation. It also offers capabilities for deploying teams of agents that collaborate on complex tasks. Agno is designed to serve as a flexible container for autonomous agents across various models and modalities.

Name: transitive-bullshit/agentic
Description: Agentic is a TypeScript standard library that provides a comprehensive set of AI functions and tools designed for both traditional TypeScript usage and LLM-based workflows. It allows developers to integrate and work with major AI SDKs like LangChain, LlamaIndex, Vercel AI SDK, and OpenAI without the need for additional glue code. The library supports both conventional API calls and usage as LLM-based tools, enabling flexible integration scenarios. Detailed documentation and examples are provided to help developers utilize its functionalities. Overall, Agentic streamlines the process of building AI-powered applications by unifying various AI services under a single interface.

Name: CopilotKit/CopilotKit
Description: CopilotKit provides developers with comprehensive tools to embed AI-powered assistants and agents directly within their applications. It offers both headless and pre-built UI components, giving full control and customization options. The repository includes several demos, such as a spreadsheet assistant, banking interface, and travel planner, which showcase its versatile use cases. Additional functionalities include generative UI support, state sharing between the app and agents, and human-in-the-loop interactions. Overall, it simplifies the process of integrating advanced AI features into modern web applications.

Name: TransformerOptimus/SuperAGI
Description: SuperAGI is a dev-first open-source autonomous AI agent framework that enables developers to build, manage, and run multiple concurrent agents. The platform provides a graphical user interface and an action console to interact with its agents, making it easy to give input and manage permissions. It offers features such as extending agent capabilities through toolkits, optimized token usage, and performance telemetry to monitor and improve agent efficiency. The framework supports integration with multiple vector databases and includes workflows for automating tasks, ensuring scalable production-ready deployment. Overall, SuperAGI is designed to facilitate the development and continuous improvement of autonomous AI agents.

Name: eosphoros-ai/DB-GPT
Description: DB-GPT is an open-source framework designed to empower developers and enterprises to build bespoke AI-native data applications in the Data 3.0 era. It leverages AWEL (Agent Workflow Expression Language) to orchestrate complex multi-agent collaborations and workflows. The framework provides a wide range of capabilities including multi-model management, Text2SQL fine-tuning, a RAG framework, and generative business intelligence to optimize data processing and application performance. Additionally, DB-GPT integrates various data sources, ensuring seamless connectivity to production business data. Its innovative approach simplifies the development of data-driven applications and has demonstrated high performance on benchmark datasets.

Name: ComposioHQ/composio
Description: Composio provides a comprehensive toolset designed to enhance AI agents by integrating them with large language models and various software services. The framework offers support for over 250 tools covering functionalities such as GitHub operations, OS tasks, and search capabilities. It supports multiple AI frameworks including OpenAI, Groq, Claude, and Langchain, and provides detailed guides for both Python and JavaScript implementations. The project features a pluggable architecture, managed authentication, and customizable tool integrations, making it versatile and developer-friendly.

Name: raga-ai-hub/RagaAI-Catalyst
Description: RagaAI Catalyst is a comprehensive Python SDK designed to enhance the management and optimization of large language model projects. It provides a wide range of functionalities including project, dataset, evaluation, and trace management, all of which streamline the workflow for LLM applications. The platform also features an advanced agentic tracing module for detailed monitoring and debugging of AI agent systems. Additionally, it offers robust capabilities for handling authentication and red-teaming, ensuring operational security and reliability. Overall, this SDK integrates seamlessly into Python-based environments to facilitate efficient AI project development and management.

Name: huggingface/agents-course
Description: This project is an educational course developed by Hugging Face that guides learners through the basics to advanced concepts of agent-based systems. The course is structured into five well-defined units, covering topics from agent fundamentals to practical use cases and benchmarking. It incorporates various frameworks like smolagents, LangChain, LangGraph, and LlamaIndex as part of its curriculum. The course is designed for individuals with basic knowledge in Python and LLMs, and it offers avenues for community contributions and discussions via Discord. Overall, it serves as a valuable resource for understanding and building AI agents.

Name: llmware-ai/llmware
Description: llmware provides a unified framework for building enterprise-level applications that integrate large language models with small, specialized models for RAG pipelines and agents. The framework streamlines the process of connecting various knowledge sources to generative AI models securely and cost-effectively. It supports multiple functionalities including model catalog access, library management for unstructured data, and diverse querying techniques. The repository includes practical examples and tutorials to help users rapidly deploy and customize their applications. Its Python-based implementation and focus on multi-agent and autonomous capabilities make it a robust tool for enterprise automation.

Name: browserbase/stagehand
Description: Stagehand simplifies web automation by integrating AI capabilities into traditional browser tools using Playwright as its backbone. It offers three simple AI APIs—act, extract, and observe—that enable developers to control web interactions using natural language commands. The framework is designed to build durable, self-healing, and repeatable automation workflows by combining AI with standard web automation techniques. With strong support for Node.js and TypeScript, Stagehand emphasizes simplicity, extensibility, and reliability for developers. Its comprehensive documentation and active community further enhance its appeal for creating robust web automation projects.

Name: NirDiamant/GenAI_Agents
Description: This repository provides an extensive collection of tutorials and implementations for developing generative AI agents, ranging from simple conversational bots to more advanced multi-agent systems. It includes practical examples using tools such as LangChain, PydanticAI, and LangGraph to demonstrate different aspects of agent development. The content is designed to cater to both beginners and experienced practitioners looking to explore innovative AI solutions. The community-driven platform encourages collaboration and continuous learning through regular updates and shared contributions. Additionally, the repository offers insights into integrating generative AI capabilities into diverse applications, making it a rich educational resource.

Name: fr0gger/Awesome-GPT-Agents
Description: This repository compiles a comprehensive list of GPT agents that are designed for various cybersecurity applications, including offensive and defensive measures. It serves as a community-driven resource where contributors can add or refine entries about GPT agents. The list includes agents that assist with tasks such as pentesting, vulnerability analysis, threat intelligence, and more. Detailed guidelines and keywords for triggering functionalities within these agents are also provided. Users are encouraged to evaluate and exercise caution when using experimental agents listed in the repository.

Name: PrefectHQ/marvin
Description: Marvin is designed to help developers build and manage AI workflows by dividing complex objectives into discrete, observable tasks that are executed by specialized AI agents. It provides a robust framework that emphasizes task-centric architecture, flexible control, and type-safe results. The project supports the composition of tasks into threads, ensuring that multi-agent coordination is seamless and effective. With features like automatic thread management and integration with multiple LLM providers, Marvin creates a structured approach to building AI-driven applications. Additionally, the framework is evolving with the integration of new features in Marvin 3.0 to enhance usability and performance.

Name: livekit/agents
Description: Livekit/agents is an open-source framework that enables the development of AI-driven server programs with real-time capabilities. It provides comprehensive tools and plugins to integrate voice, video, and data communication for a seamless interaction experience. The framework supports a variety of plugins for tasks such as speech-to-text, text-to-speech, and language model inference. Built-in job scheduling and advanced conversation flow mechanisms enhance the performance of voice agents and multimodal applications. Its flexibility allows integration with various platforms, including telephony stacks, making it a robust solution for multimodal AI applications.

Name: julep-ai/julep
Description: Julep provides a robust, serverless infrastructure to design and orchestrate complex AI workflows without the burden of managing underlying infrastructure. It offers SDKs for Python and JavaScript, along with a CLI and API, to facilitate seamless integration with external tools and services. The platform features smart memory, parallel processing, and comprehensive monitoring, allowing agents to remember context and handle multi-step tasks efficiently. Its design enables teams to scale and automate intricate processes, making it ideal for advanced AI implementations. Overall, Julep streamlines the creation and management of intelligent workflows, focusing on integration and process orchestration.

Name: qodo-ai/qodo-cover
Description: Qodo Cover leverages generative AI to automatically generate and extend unit tests, enhancing software quality by improving code coverage. It is designed to work both via a command-line interface and within CI workflows, offering flexibility for local development and automated testing pipelines. The project is structured with components like a test runner, coverage parser, prompt builder, and an AI caller that interacts with large language models. It supports multiple installation methods, including Python pip and standalone binaries, and demonstrates usage examples for Python, Go, and Java. The repository invites community collaboration to further evolve its test-generation capabilities and integrate innovative features.

Name: kyegomez/swarms
Description: Swarms is a robust, production-ready framework built in Python for managing and orchestrating multi-agent systems in enterprise environments. It offers features like hierarchical swarms, dynamic agent rearrangement, parallel processing, and sequential and graph-based workflows to manage complex tasks. The framework is designed with modularity and scalability in mind, ensuring high reliability and comprehensive logging and debugging capabilities. Developer tools such as a simple API, CLI tools, and extensive documentation further streamline the process of creating custom agent workflows. Integration with various service providers enhances its flexibility and performance in real-world applications.

Name: awslabs/multi-agent-orchestrator
Description: The Multi-Agent Orchestrator is an open-source framework designed to manage multiple AI agents for processing complex conversations. It offers intelligent intent classification and dynamic routing to ensure that user queries are handled by the most appropriate agent. The framework supports both streaming and non-streaming responses, and it maintains conversation context across various agents. With dual language support in Python and TypeScript, it is highly adaptable and can be deployed in a variety of environments. The addition of the SupervisorAgent further enhances the system’s capability by enabling coordinated team efforts among specialized agents.

Name: ragapp/ragapp
Description: RAGapp is a comprehensive platform designed to deploy and manage agentic Retrieval-Augmented Generation (RAG) applications in enterprise settings. It leverages Docker for simple deployment, with support for both single and multiple RAGapp configurations. The platform integrates hosted AI models from providers like OpenAI and Gemini, as well as local models using Ollama, ensuring versatile AI support. Built using Python with tools like Poetry and Make, RAGapp provides a user-friendly admin UI and RESTful API endpoints to streamline configuration and operations. Its rich set of deployment options and support for modern cloud environments makes it an efficient solution for managing autonomous AI systems.

Name: Integuru-AI/Integuru
Description: Integuru is a Python-based tool that analyzes browser network requests and cookies to reverse-engineer a platform's internal API endpoints. It generates a dependency graph of HTTP requests and produces runnable Python code to perform desired actions. The tool offers integration with Jupyter Notebook and a command-line interface for flexible usage. It leverages advanced language models, such as GPT-4o and o1-preview, for generating accurate integration code, and it includes CI workflows and comprehensive tests for reliability. Overall, Integuru streamlines the process of automating interactions with various platforms through custom integration code.

Name: google-deepmind/acme
Description: Acme is a reinforcement learning framework developed by Google DeepMind for both research and the development of robust RL agents. The framework provides a modular set of building blocks that serve as reference implementations and strong baselines for algorithm performance. It emphasizes simplicity and scalability, allowing agents to be run in both single-stream and distributed configurations. Detailed examples, tutorials, and documentation are provided to help researchers get started quickly. Overall, Acme is tailored for researchers who aim to experiment with and push the boundaries of reinforcement learning.

Name: MervinPraison/PraisonAI
Description: PraisonAI is designed to create and manage multi-agent AI systems with a focus on automation and effective collaboration between agents. The framework supports features such as self-reflection, multi-modality, and memory integration, facilitating both simple and complex tasks. It provides low-code solutions that integrate PraisonAI Agents, AutoGen, and CrewAI to streamline agent deployment. The repository includes comprehensive documentation and examples in Python and JavaScript, showcasing its flexible usage. Overall, PraisonAI aims to simplify the development of multi-agent LLM systems with extensive customizability and robust tool integration.

Name: langroid/langroid
Description: Langroid is a Python framework designed for building multi-agent applications that leverage large language models for enhanced problem-solving. The project provides an easy-to-use interface where developers can set up agents, equip them with various components such as LLMs, vector stores, and tools, and have these agents collaborate through message exchanges. It emphasizes a developer-friendly experience without relying on other complex LLM frameworks like Langchain. The documentation includes examples, quick-start guides, and showcases real-world usage in production environments.

Name: FellouAI/eko
Description: Eko is a robust and production-ready JavaScript framework focused on creating reliable agents for automating complex workflows. It provides a unified interface for running agents in both browser and Node.js environments. The framework supports multi-step task orchestration, such as web scraping, file management, and software testing automation. With comprehensive documentation and community support, Eko empowers developers to integrate natural language processing into their automation processes. Its approach simplifies the creation and management of autonomous agents for various use cases.

Name: potpie-ai/potpie
Description: Potpie is an open-source platform that builds AI agents tailored to your codebase to automate a range of software development tasks. It constructs a comprehensive knowledge graph to understand and analyze complex code relationships. The platform offers both pre-built and customizable agents designed for tasks like debugging, code analysis, and test generation. It integrates with existing development workflows, including a dedicated VSCode extension to streamline operations directly from the editor. Overall, Potpie delivers a flexible and intelligent solution for enhancing code quality and development efficiency.

Name: langchain-ai/langgraph-studio
Description: LangGraph Studio is a specialized desktop integrated development environment designed for creating, visualizing, and debugging LangGraph agent workflows. It offers interactive visual graphs and state editing to help users understand and iterate on complex agent applications. The platform integrates seamlessly with LangSmith for collaborative debugging and supports fast prototyping through local server execution, bypassing Docker for improved startup times. The IDE provides comprehensive features such as thread management, configuration of graph runs, and step-by-step execution using interrupts. Overall, it streamlines the development process for LLM-based agent applications.

Name: JoshuaC215/agent-service-toolkit
Description: This repository provides a full toolkit designed to help developers implement AI agent services efficiently. It leverages the LangGraph framework for customizable agent creation, complemented by a FastAPI backend for API services. A Streamlit interface offers a user-friendly chat experience, and the project supports both synchronous and asynchronous operations. With Docker support, robust testing, and clear documentation, the toolkit simplifies building and deploying agent-based applications. Overall, it serves as a strong starting point for those interested in creating service-driven AI agents.

Name: microsoft/genaiscript
Description: GenAIScript is a JavaScript library that allows developers to programmatically assemble prompts and orchestrate the interactions between large language models and various tools. It integrates seamlessly with Visual Studio Code and supports both JavaScript and TypeScript, enhancing productivity. The library provides functionalities for file manipulation, data schema definition, and streamlined LLM outputs parsing. It also supports the registration of LLM agents, enabling complex task automation through a combination of tools and scripts. With features like debugging, testing, and quick deployment, GenAIScript simplifies the development of AI-powered applications.

Name: zjunlp/LLMAgentPapers
Description: The repository compiles a comprehensive and carefully selected list of research papers focused on large language model agents. It organizes the papers into various topics such as agent personality, memory, planning, tool use, and multi-agent interactions. The list serves as a valuable reference for researchers interested in the underlying methodologies and advancements in AI agent design and behavior. The curated collection includes both recent and seminal works, enabling users to grasp the evolution of the field. Overall, the repository is an excellent resource for those looking to explore scholarly work in the area of AI agents.

Name: codelion/optillm
Description: Optillm is an optimizing inference proxy that employs state-of-the-art techniques to improve the performance and accuracy of LLMs in coding, logical, and mathematical queries. It leverages methods such as moa (mixture-of-agents), mcts, and decoding techniques like entropy and cot decoding to achieve its goals. The project supports multiple LLM providers, including OpenAI, Cerebras, and Azure OpenAI, making it highly versatile. With flexible installation options via pip, docker, or source code, it caters to varied deployment needs. Its design allows for the combination of optimization techniques, ensuring enhanced inference performance across a range of tasks.

Name: kingjulio8238/Memary
Description: Memary is designed to integrate with existing autonomous agents, providing an enhanced memory layer that emulates human memory. It leverages local models through Ollama and supports popular language models like GPT-3.5-turbo to offer flexible reasoning capabilities. The framework simplifies memory management by offering auto-generated memory, multi-graph support, and tool augmentation, ensuring minimal developer effort. It also includes a ChatAgent class that integrates key components like routing agents and knowledge graphs, indicative of a fully modular design. Overall, the project aids in advancing towards AGI by realistically mimicking human memory processes.

Name: run-llama/llama_deploy
Description: LlamaDeploy is an asynchronous Python framework designed for deploying and scaling agentic multi-service systems based on workflows from llama_index. It enables users to easily transition their work from local development environments, such as notebooks, to full production deployments with minimal changes. The system provides both a CLI tool (llamactl) and an SDK for seamless integration. Its architecture supports high concurrency, fault tolerance, and scalability through a microservices approach. Overall, the framework simplifies the process of productionizing complex agentic workflows and ensures efficient state management across services.

Name: getzep/graphiti
Description: Graphiti ingests both structured and unstructured data to build evolving knowledge graphs that capture complex and changing relationships over time. It records temporal metadata for each relationship, allowing for point-in-time queries and the preservation of historical context. The tool integrates hybrid search techniques, combining semantic similarity and BM25 full-text search, to enable effective information retrieval. It is designed to support LLM-powered assistants and autonomous agents, and it underpins Zep's memory layer for enhanced agent memory capabilities.

Name: trypromptly/LLMStack
Description: LLMStack enables users to build tailor-made generative AI agents and chatbots by chaining multiple LLMs together. It features a no-code builder that allows users to integrate internal tools, external data sources, and cloud services without any programming skills. The platform supports deployment on premises as well as in the cloud and offers API access along with integrations to Slack and Discord. It is designed to facilitate the creation of a wide variety of AI-driven applications, workflows, and automation processes in a multi-tenant environment.

Name: i-am-bee/bee-agent-framework
Description: Bee Agent Framework, now branded as BeeAI Framework, is an open-source library aimed at constructing scalable and powerful multi-agent systems. It provides functionality for both Python and TypeScript, enabling users to deploy production-ready multi-agent architectures easily using workflows. The framework supports integration with various AI services, memory management, serialization of agent states, and extensive tooling, making it suitable for complex use cases involving multiple models and tools. BeeAI Framework also allows customization and extendibility, supporting seamless integration with diverse models and AI services.

Name: melih-unsal/DemoGPT
Description: DemoGPT is a comprehensive open-source initiative that transforms user instructions into autonomous agents by generating LangChain code and assembling interactive Streamlit applications. The toolkit leverages the capabilities of GPT-3.5-turbo to plan, generate tasks, and create code snippets, ultimately producing a user-friendly application. It enables developers to rapidly prototype and deploy LLM-based solutions with minimal friction. Future enhancements are planned to include API usage via Gorilla and the incorporation of external APIs, further broadening its functional scope. Its architecture focuses on streamlined agent development, making it a versatile tool in the LLM ecosystem.

Name: 101dotxyz/GPTeam
Description: GPTeam is a framework that leverages GPT-4 to create and manage multiple AI agents that collaborate towards predefined objectives. The project explores the dynamics of inter-agent communication and productivity within a simulated environment. It includes features such as agent memory, reflection, and integration with external tools like Discord and Anthropic Claude. User-friendly setup instructions and configuration options make it accessible for experimenting with multi-agent systems. Overall, it serves as a powerful tool for investigating the potential of advanced language models in orchestrating complex agent behaviors.

Name: patterns-ai-core/langchainrb
Description: Langchainrb is designed to facilitate the development of applications that leverage large language models. It provides a consistent interface for interacting with various LLM providers, allowing seamless switching between them. The SDK supports generating embeddings, prompt completions, and chat completions while also offering tools for prompt and output management. Additionally, it integrates well with Ruby on Rails and includes examples, comprehensive documentation, and support for retrieval augmented generation and chat assistants.

Name: mastra-ai/mastra
Description: Mastra is an opinionated TypeScript framework designed to help developers build AI applications quickly. It offers essential primitives such as agents, workflows, tools, RAG pipelines, integrations, and evals to create robust AI solutions. The framework leverages the Vercel AI SDK to interface with popular LLM providers like OpenAI, Anthropic, and Google Gemini. Developers can run Mastra on their local machine or deploy it to a serverless cloud environment. With comprehensive documentation and supportive community channels, Mastra streamlines the process of developing AI applications.

Name: mongodb-developer/GenAI-Showcase
Description: MongoDB's GenAI Showcase is a comprehensive repository containing examples and sample applications that demonstrate the integration of MongoDB with Generative AI technologies. It offers a variety of resources including Jupyter notebooks, JavaScript and Python apps, and contributions from AI partners. The repository covers Retrieval-Augmented Generation (RAG) pipelines and AI agent-based applications, showcasing MongoDB's role as a vector database, operational database, and memory provider. This collection serves both beginners and advanced developers by providing step-by-step guides and practical demos for setting up MongoDB clusters and developing GenAI applications. Overall, it is a valuable resource for anyone interested in exploring the intersection of database technology and generative AI.

Name: MeetKai/functionary
Description: MeetKai/functionary is a specialized chat language model designed to dynamically interpret and execute functions within a conversation. It determines when to trigger functions and manages their execution either serially or in parallel, ensuring outputs are handled appropriately. The project supports multiple deployment options including vLLM and SGLang servers, catering to different hardware and scalability needs. With features like grammar sampling for strict adherence to prompt templates and integrated LoRA adapter support, Functionary demonstrates active development and versatility. Detailed changelogs and documentation further highlight its continuous improvement and robust implementation.

Name: PySpur-Dev/pyspur
Description: PySpur enables users to quickly design and deploy AI agent workflows using a drag-and-drop interface. The platform supports various features such as iterative tool calling with memory loops, multimodal inputs including text, images, audio, and video, and robust integrations with services like Slack, GitHub, and Google Sheets. It offers both a quick start via the Python package and a Docker-based deployment for scalable production environments. Additionally, the toolkit supports customizable deployments through its UI and manual configuration, making it flexible for various use cases. Overall, PySpur provides a comprehensive solution for creating, testing, and iterating on AI agent workflows.

Name: jgravelle/AutoGroq
Description: AutoGroq is a groundbreaking Python tool that dynamically generates custom teams of AI expert agents based on user requirements. It orchestrates workflows and leverages multiple LLMs such as Groq, ChatGPT, and Ollama to provide specialized support. The tool simplifies AI assistant interactions by eliminating the need for manual configuration and coding. With features like dynamic agent generation, natural conversation flow, code snippet extraction, and flexible agent management, it offers a user-friendly, no-code solution. AutoGroq’s implementation using Streamlit further ensures rapid deployment and ease of customization.

Name: ThousandBirdsInc/chidori
Description: Chidori is an open-source orchestrator and runtime designed to build durable AI agents by leveraging familiar software patterns in Python and JavaScript. It provides a reactive environment that supports advanced features such as time-travel debugging and state management for long-running workflows. The framework enables developers to pause, resume, branch, and revert code execution, making it easier to manage and observe agent behavior. Additionally, it integrates seamlessly with modern AI tools, offering a visual debugging interface and code interpretation capabilities. By bridging the gap between AI models and traditional development, Chidori streamlines the construction and monitoring of robust agent systems.

Name: fetchai/uAgents
Description: uAgents is developed by Fetch.ai as a Python framework that facilitates the creation of decentralized AI agents. It leverages simple and expressive decorators to schedule tasks and handle events, making agent development intuitive. Each agent automatically connects to a blockchain-based Almanac upon startup, ensuring secure identity and asset management via cryptographic measures. Comprehensive documentation, examples, and integration guides are provided to assist developers in building a variety of agent applications. The project is open source and licensed under Apache License 2.0, encouraging community contributions.

Name: AGI-Edgerunners/LLM-Agents-Papers
Description: This repository collects a curated list of research papers focusing on large language model-based agents. It organizes papers into various categories such as surveys, planning, memory mechanisms, and agent frameworks. The repository serves as a valuable resource for researchers and practitioners looking to explore state-of-the-art developments in autonomous AI agents. It also recommends additional related paper collections for a more comprehensive study. The content is clearly aimed at facilitating the understanding and advancement of AI agents through scholarly works.

Name: GDQuest/godot-steering-ai-framework
Description: The GDQuest Godot Steering AI Framework is designed to help developers integrate complex steering behaviors for AI movement in their Godot projects. It supports both 2D and 3D gameplay and is implemented using GDScript for ease of integration. The framework draws inspiration from classic AI algorithms by Craig Reynolds and includes a variety of behaviors such as fleeing, following, and group dynamics. Comprehensive documentation and demos are provided to facilitate learning and effective implementation in game development. This project emphasizes efficient, programmable movement for characters and vehicles within a game environment.

Name: OpenAdaptAI/OpenAdapt
Description: OpenAdapt connects foundation models such as GPT-4 to traditional desktop and web GUIs to automate repetitive tasks. It records screenshots and user interactions, converting them into a tokenized format to generate synthetic input via transformer model completions. The framework also visualizes recorded workflows and replays them, offering multiple strategies for automation and debugging. Designed to learn from human demonstrations, it grounds its automation process to mitigate hallucinations and improve task completion accuracy. The project is aimed at replacing conventional robotic process automation (RPA) by utilizing the power of modern AI models.

Name: LazyAGI/LazyLLM
Description: LazyLLM simplifies the process of creating complex AI applications by providing a low-code environment that supports multi-agent interactions. The tool offers an easy-to-use assembly process with built-in standard workflows, making it accessible even to those unfamiliar with large language models. It facilitates rapid prototyping, iterative optimization, and seamless deployment across various platforms. The project is backed by comprehensive tutorials and examples, ensuring both beginners and advanced users can effectively leverage its capabilities. Its Python-based framework underpins a variety of modules including chatbots, RAG pipelines, and fine-tuning components.

Name: Div99/agent-protocol
Description: The Agent Protocol provides a common interface for communication between AI agents, enabling seamless integration across various frameworks. It defines an API specification using OpenAPI to outline endpoints for tasks and steps, reducing the complexity of agent integration. The repository includes both an SDK and a client library to facilitate agent development and usage. Its design philosophy emphasizes minimal boilerplate and enhanced developer experience, while also paving the way for future improvements such as agent-to-agent communication and third-party service integration.

Name: dust-tt/dust
Description: Dust is an AI-driven platform that streamlines work processes by integrating custom AI agents. It offers a comprehensive developer platform and user guides to help users and developers leverage AI automation for faster workflows. The project focuses on enhancing productivity by automating routine tasks and optimizing work efficiency. It also demonstrates active development with job postings, indicating a commitment to growth and continuous improvement.

Name: metaskills/experts
Description: Experts.js provides developers with a streamlined JavaScript interface to create and deploy AI agents using OpenAI's Assistants API. The library abstracts complex operations such as managing threads, run objects, and streaming events, making it easy to integrate multiple AI agents as tools. It supports both ES6 and CommonJS modules and includes clear examples to guide users through assistant creation and tool addition. The project emphasizes building multi-agent systems with enhanced memory and attention through panel of experts architecture. Overall, it offers a robust framework for orchestrating AI-driven workflows.

Name: langchain-ai/langgraphjs
Description: LangGraph.js is a robust JavaScript framework designed for creating stateful, multi-agent applications with LLMs. It provides developers with fine-grained control over the flow and state of language agents, enabling capabilities like memory persistence and human-in-loop interactions. The framework includes comprehensive tooling for deployment, debugging, and monitoring of agent workflows, making it suitable for production-grade applications. It integrates seamlessly with popular AI components such as LangChain and LangSmith while also offering standalone functionality. Inspired by established graph processing and big data paradigms, LangGraph.js streamlines the development of scalable and efficient agent architectures.

Name: kaiban-ai/KaibanJS
Description: KaibanJS adapts the Kanban methodology to manage AI agents and their tasks in real time. The framework allows users to create, visualize, and manage agents, tasks, tools, and teams effectively. It includes intuitive features like a task board and real-time workflow visualization to streamline AI workflow management. Additionally, KaibanJS supports integration with various development environments such as Node.js and React for flexible usage. Its comprehensive design makes it a powerful tool for orchestrating multi-agent systems in JavaScript.

Name: nasa-jpl/rosa
Description: ROSA, developed by NASA JPL, is an AI agent designed for interacting with robotics systems using natural language, supporting both ROS1 and ROS2. It leverages the Langchain framework to integrate advanced natural language processing capabilities with robot control. The project provides detailed examples, demos, and guides, including a TurtleSim simulation and an upcoming Nvidia IsaacSim extension. With its clear documentation and ease of customization, ROSA aims to make robotics development more accessible and efficient. Its design emphasizes flexibility and adaptability to different robotic environments.

Name: TrafficGuard/typedai
Description: TypedAI is a robust platform designed for developers to create and manage autonomous AI agents using a TypeScript-first approach. It supports multiple agent types such as software developer agents, code review agents, and chatbots, enabling comprehensive LLM-based workflows. The platform includes features for multi-agent reasoning, human-in-the-loop interventions, and integration with various LLM services. It offers flexible deployment options including a CLI, web interface, and cloud-hosted configurations while leveraging the Python AI ecosystem for extended capabilities. Overall, TypedAI provides a well-integrated environment for developing, debugging, and scaling autonomous AI workflows.

Name: e2b-dev/awesome-ai-sdks
Description: This repository compiles a comprehensive list of SDKs, frameworks, libraries, and tools specifically designed for building autonomous AI agents. It serves as a central resource by aggregating various technologies that support the development, monitoring, debugging, and deployment of AI agents. The list is maintained by the e2b team, which is dedicated to creating an operating system for AI agents. It encourages community contributions and feedback to keep the collection up-to-date, reflecting the fast-paced development in the AI agents ecosystem. The repository provides links to other related projects and resources, adding depth to its utility as a reference guide.

Name: dreadnode/nerve
Description: dreadnode/nerve is an open-source framework that lets users create and configure language model agents through YAML-based tasklets. The project provides a standard library of actions that empower agents to autonomously plan and solve problems. It supports multi-agent workflows, enabling different agents to handle various parts of a task while maintaining LLM agnosticism. The tool also includes compatibility layers for function calling across different models. Overall, it offers a no-code approach to building advanced AI agents.

Name: EmbeddedLLM/JamAIBase
Description: JamAIBase provides an innovative platform for building AI applications with built-in support for LLM and RAG, making it easy to integrate intelligent features into databases using an intuitive spreadsheet-like UI. It integrates an embedded SQLite database and LanceDB for efficient data management and vector search. The platform converts traditional tables into dynamic, AI-enhanced generative, action, knowledge, and chat tables, facilitating real-time chatbot interactions and complex workflow orchestration. Its declarative paradigm allows users to focus on defining desired outcomes rather than implementation details, lowering the barrier to creating sophisticated AI-driven applications.

Name: callstackincubator/cali
Description: Cali is an AI-powered tool that integrates with the React Native CLI to simplify app development tasks. It provides functionality for build automation on both iOS and Android platforms, enabling developers to streamline their workflows. The agent also offers device management and dependency handling, including npm and CocoaPods integrations. Furthermore, Cali enhances productivity by exposing various React Native utilities as tools accessible via an LLM interface. It can be used in a standalone terminal mode, integrated with Vercel AI SDK, or through MCP server environments, showcasing its versatility for modern development needs.

Name: dynamiq-ai/dynamiq
Description: Dynamiq is an open-source, Python-based framework that enables the streamlined creation and management of AI-powered application workflows. It integrates large language models with specialized agents like ReActAgent and ReflectionAgent to perform complex tasks. The framework supports both parallel and sequential agent workflows and leverages retrieval-augmented generation (RAG) for efficient processing. Designed with extensibility in mind, Dynamiq offers comprehensive tools and documentation to help developers compose sophisticated multi-agent systems. Overall, it aims to simplify the process of building and orchestrating intelligent automation solutions.

Name: Azure-Samples/miyagi
Description: Miyagi is a demonstration project that explores Microsoft’s Copilot Stack for developing intelligent, multi-agent applications using a cloud-native, event-driven architecture. It combines various foundation models including Semantic Kernel, LangChain, and LlamaIndex, along with supporting tools like Promptflow, to showcase advanced AI design patterns. The project includes examples for generative text and image applications, emphasizing traditional ML and modern generative AI use cases. Through a guided workshop approach, Miyagi helps software engineers learn prompt engineering, agent orchestration, and vectorization techniques. Overall, it serves as an experiential platform for transforming applications with intelligent automation and hyper-personalization capabilities.

Name: kaushikb11/awesome-llm-agents
Description: This repository is a curated collection of frameworks and tools designed for LLM agents, with a focus on multi-agent systems and AI development. It organizes a variety of resources, covering multiple languages and specialized functionalities, to help developers navigate the evolving landscape of AI agents. The list includes well-known frameworks and cutting-edge tools that support autonomous and collaborative agent architectures. It serves as a valuable reference for practitioners and researchers interested in exploring and integrating LLM agent technologies. Contributions and suggestions are encouraged to keep the resource up-to-date.

Name: theredsix/cerebellum
Description: Cerebellum automates web browsing by using an AI agent that plans and executes actions such as clicking and typing on web pages. It conceptualizes navigation as a directed graph where each page is a node and user interactions are edges. The system leverages a large language model, specifically Claude 3.5 Sonnet, to determine the next steps based on the current state and past actions to fulfill specified goals. With support for both Python and Typescript, Cerebellum integrates with any Selenium-supported browser and is continuously evolving to include features like enhanced scrolling and tabbed browsing. Its lightweight design emphasizes efficient, goal-oriented automation, making it an attractive framework for browser-based tasks.

Name: lancedb/vectordb-recipes
Description: This repository provides a wide range of resources and examples for building applications in GenAI projects using LanceDB and various vector search techniques. It includes hands-on tutorials ranging from building RAG systems and multimodal search applications to designing AI agents for autonomous customer support. The project integrates into the Python data ecosystem and also offers a native Typescript SDK for vector search in serverless functions. It is organized into sections that help users quickly access code samples and guides for creating effective AI-driven solutions. The inclusion of an AI Agents section confirms its relevance to multi-agent applications.

Name: tmgthb/Autonomous-Agents
Description: The repository hosts a curated collection of research papers focusing on autonomous agents and related topics such as LLM agents and dynamic memory systems. It provides a chronological listing of papers with summaries that outline various frameworks and approaches within the autonomous agents domain. The collection includes works on reinforcement learning, planning algorithms, and human-AI collaboration. It is updated daily to keep up with the latest research trends and serve as a valuable resource for researchers and enthusiasts in the field.

Name: Hexastack/Hexabot
Description: Hexabot provides an open-source solution for developers to design, deploy, and manage AI-powered chatbots and agents. The platform supports multi-channel interactions including web, mobile, and social media, ensuring a seamless user experience. With a visual editor, plugin system, and text-to-action capabilities, Hexabot offers flexibility and robust customization options. Integrated with popular LLMs and frameworks, it enables developers to effortlessly build and extend the chatbot ecosystem, supported by comprehensive documentation and active community engagement.

Name: eleurent/rl-agents
Description: This repository presents various reinforcement learning agents with diverse planning and value-based approaches. It includes implementations such as value iteration, cross-entropy method, Monte Carlo Tree Search, and Deep Q-Network among others. The project facilitates experiments and benchmark processes over different environments with standardized interfaces. It also offers tools for monitoring performance through logging and tensorboard integration. Overall, it is designed to support both research and practical applications in reinforcement learning.

Name: strnad/CrewAI-Studio
Description: CrewAI Studio is a no-code application designed to simplify the management and orchestration of CrewAI agents. It features a Streamlit-based user interface that makes it accessible to users who prefer not to write any code. The project supports installation via Conda, virtual environments, and even Docker Compose, making it versatile across Windows, Linux, and MacOS. Additionally, it integrates with multiple API backends such as OpenAI, Groq, Anthropic, and LM Studio, and provides custom tools for various tasks. Overall, it streamlines the process of interacting with AI agents in a user-friendly manner.

Name: humanlayer/humanlayer
Description: HumanLayer is a toolkit designed to incorporate human oversight into AI agent workflows, ensuring that high-stakes actions such as function calls are carefully mediated. The toolkit supports both Python and JavaScript/TypeScript, giving developers flexibility when integrating AI and human elements. It provides decorators like require_approval and functions like human_as_tool to enforce human intervention in critical operations. Detailed examples and documentation are provided to help users integrate the tool with frameworks like LangChain and CrewAI. Overall, HumanLayer aims to improve the reliability and safety of autonomous agent operations by mandating human oversight.

Name: Technion-Kishony-lab/data-to-paper
Description: data-to-paper is an innovative automation framework that systematically guides interacting LLM and rule-based agents through the entire process of scientific research. It starts with raw data and proceeds through hypothesis formation, literature review, data analysis, and manuscript drafting. The framework emphasizes transparency and traceability by enabling users to trace numeric values back to the code that generated them. It supports both autonomous operation and human-guided oversight through its autopilot and copilot features. This pioneering tool is designed to revolutionize AI-driven research by ensuring that every step of the research process is both transparent and verifiable.

Name: Maximilian-Winter/llama-cpp-agent
Description: llama-cpp-agent is a comprehensive Python framework designed to facilitate interactions with Large Language Models. It provides a simple chat interface and supports generating structured outputs using guided sampling techniques and JSON schema generation. The framework enables both single and parallel function calling, which allows dynamic execution of functions through LLM interactions. It integrates seamlessly with various providers such as llama-cpp-python, llama.cpp server, TGI, and vllm, catering to diverse deployment scenarios. Detailed documentation and usage examples are provided to help developers leverage its robust capabilities.

Name: slavakurilyak/awesome-ai-agents
Description: This repository is a comprehensive collection that curates more than 300 resources related to AI agents. It includes links to various projects spanning from development frameworks to standardized protocols and evaluation tools. The list is maintained by Slava Kurilyak and features both open-source and proprietary projects. It serves as a go-to resource for both developers and researchers seeking information on agentic AI and related technologies. The collection is organized to cover diverse aspects of AI agents, making it easy to navigate and explore relevant projects.

Name: kaarthik108/snowChat
Description: snowChat allows users to interact with their Snowflake databases using natural language queries, eliminating the need for manual SQL coding. It integrates an array of large language models, including GPT-4, Gemini Flash 1.5, Claude 3 Haiku, and various Llama models, to generate precise SQL queries. The application features a dynamic and interactive chat interface built with Streamlit, ensuring a user-friendly experience. Additionally, the platform implements an agent-based architecture along with advanced features like conversational memory and self-healing SQL to improve data access reliability. This design empowers users to make rapid, data-driven decisions by bridging the gap between conversational input and complex database queries.

Name: lastmile-ai/mcp-agent
Description: mcp-agent is a Python framework designed to build robust AI agents by leveraging the Model Context Protocol and simple, composable patterns. It simplifies the management of MCP server connections and integrates multiple agent workflows to streamline AI application development. The project implements strategies from Anthropic's 'Building Effective Agents' and includes a multi-agent orchestration pattern inspired by OpenAI's Swarm. Its modular design allows developers to easily chain various workflow patterns and build production-ready AI solutions. The project is in early development and encourages community contributions to further enhance its capabilities.

Name: camel-ai/oasis
Description: OASIS combines large language models with traditional rule-based agents to realistically simulate social media dynamics on platforms like Twitter and Reddit. It supports simulations of up to one million agents, enabling studies of complex social phenomena such as information spread, group polarization, and herd behavior. The project emphasizes scalability, dynamic environments, and diverse action spaces to mirror authentic user interactions online. Detailed installation and configuration instructions allow researchers to quickly set up and experiment with the simulation framework. Overall, it serves as a comprehensive tool for exploring emergent behaviors in digital social networks.

Name: Mintplex-Labs/anything-llm
Description: AnythingLLM is a full-stack application designed to transform documents into dynamic, interactive contexts for intelligent conversations with any LLM. The project provides a robust platform featuring custom AI agents, a no-code AI agent builder, and multi-user management with clear workspace segmentation. It offers support for a wide array of LLMs and vector database solutions, allowing users to personalize their AI chat experience. The application also includes a drag-and-drop chat UI, embeddable chat widgets, and various integrations which simplify the process of turning disparate content into conversational data. Overall, AnythingLLM aims to bridge the gap between static documents and interactive, intelligent communication powered by AI agents.

Name: browser-use/browser-use
Description: Browser-use is a Python library designed to enable AI agents to interact with and control web browsers to perform various automation tasks. It offers a simple installation via pip and integrates seamlessly with tools like Playwright. The library provides code examples that illustrate how to automate browser tasks using AI, such as searching on Reddit and interacting with web interfaces. It also offers a hosted cloud version and UI demos using Gradio, making it accessible for both testing and production use. With an active community and detailed documentation, it encourages contributions and collaboration to further enhance browser automation capabilities.

Name: letta-ai/letta
Description: Letta, formerly known as MemGPT, is a comprehensive open source framework designed for creating stateful agents powered by large language models. It provides a server runtime that manages agents via Docker and integrates a web-based Agent Development Environment for testing, debugging, and managing agents. The framework is model-agnostic, making it compatible with various LLM API providers, and emphasizes transparency with its white-box design. Letta enables advanced reasoning capabilities and long-term memory management, making it suitable for complex conversational systems and support applications.

Name: plandex-ai/plandex
Description: Plandex is an AI coding agent designed to assist developers in planning and executing complex tasks directly from the terminal. It allows users to initiate projects, load relevant files into context, and review planned changes in a protective sandbox before applying them. The tool integrates with multiple LLM providers, such as OpenAI, and supports workflows for building full features and applications efficiently. It emphasizes real-world use cases by automating routine development processes and reducing manual coding overhead. Overall, Plandex enhances productivity and improves the developer experience by providing intelligent task automation.

Name: n8n-io/self-hosted-ai-starter-kit
Description: The repository provides a comprehensive starter kit to establish a local AI environment using Docker Compose. It integrates several robust components including the self-hosted n8n platform, Ollama for running local LLMs, Qdrant as a vector store, and PostgreSQL for data management. The kit is designed for building various AI workflows such as scheduling appointments, summarizing documents, and smart Slack bots. It offers detailed installation and configuration instructions for different hardware setups, ensuring ease of use. Overall, the project is a practical solution for developers looking to experiment with self-hosted AI and low-code automation workflows.

Name: sigoden/aichat
Description: AIChat is a command-line tool designed to offer interactive chat features along with advanced functionalities for working with large language models. It provides multiple modes including REPL and CMD mode, as well as a shell assistant that converts natural language commands into precise shell commands. The tool seamlessly integrates with over 20 leading LLM providers and supports various input forms such as files, directories, URLs, and standard input. It also includes additional capabilities like role customization, session management, macros, and function calling to extend LLM capabilities. With a built-in lightweight HTTP server offering a web-based LLM playground and arena, AIChat is versatile and user-friendly.

Name: microsoft/TaskWeaver
Description: TaskWeaver is a Python framework developed by Microsoft that leverages AI agents to plan and execute complex data analytics tasks. It enables the decomposition of tasks, preserving both chat history and code execution details to foster a stateful and reflective execution environment. The framework supports customization through plugins, facilitating advanced functionalities like code verification, debugging, and security considerations. TaskWeaver is designed to handle rich data structures and integrates with various LLMs for enhanced performance. Its open-box approach makes it easy to extend and optimize based on specific domain requirements.

Name: liveblocks/liveblocks
Description: Liveblocks provides a suite of ready-to-use, customizable components that simplify the integration of collaborative features into products. The platform includes components such as text editors, comments, and AI Copilots, which enable human and AI collaboration. It supports advanced use cases by offering scalability with built-in sync engines like Liveblocks Storage and Yjs. In addition, the repository offers various packages and SDKs, including integrations for React and other frameworks, making it versatile for different development environments. Overall, Liveblocks is designed to boost product engagement without compromising development roadmaps.

Name: steel-dev/steel-browser
Description: Steel Browser is an open-source API designed to automate web interactions, making it easier for AI agents and applications to interact with live web pages. It serves as a production-ready, containerized browser sandbox that supports multiple automation frameworks such as Puppeteer, Playwright, and Selenium. The API includes features like session management, stealth capabilities, proxy support, and the ability to load Chrome extensions. With an integrated web UI for debugging and session visualization, Steel Browser simplifies the development of web automation tools. It is deployable via Docker and can also run directly with Node.js.

Name: ErikBjare/gptme
Description: gptme is a personal AI assistant/agent that operates in the terminal, offering extensive functionalities such as code execution, file editing, and web browsing. It is designed to be an unconstrained alternative to ChatGPT with Code Interpreter and similar tools, providing local execution without typical external limitations. The tool integrates various capabilities, including vision support, terminal UI, and a web interface for broader accessibility. It is built using Python and leverages multi-agent architectures, allowing for both simple and advanced interactions. Comprehensive demos and documentation are provided to illustrate its use cases and features.

Name: dot-agent/nextpy
Description: Nextpy is a Python-based framework that enables the creation of autonomous AI systems through self-modifying software. It offers advanced control via a powerful prompt engine and structured outputs that enhance prompt engineering beyond traditional methods. The framework incorporates robust agent management, including session state with LLMs and token optimization, making it highly effective for AI code generation. It also emphasizes modularity and scalability, allowing seamless operation across various environments. Furthermore, Nextpy integrates numerous open-source technologies, making it a versatile tool for developers seeking to implement advanced AI functionalities.

Name: microsoft/ai-agents-for-beginners
Description: This project is a comprehensive course with 10 lessons that cover everything needed to get started with building AI agents. It provides Python code examples that utilize Azure AI Foundry and GitHub Model Catalogs, supported by Microsoft AI services. The course offers multi-language support and detailed guidance on various agentic frameworks and design patterns. Beginners are encouraged to fork the repository to run code samples and participate in the community, ensuring a hands-on learning experience.

Name: Anil-matcha/Awesome-GPT-Store
Description: Awesome-GPT-Store is a repository that compiles a diverse set of specialized custom GPT chatbots, each designed for a variety of tasks. The curated list includes chatbots for technical assistance, creative content creation, coding support, and more. It provides users with various options to interact with AI-driven tools, including functionalities like email verification, video editing, and file conversion. The project also highlights additional resources such as authentication guides and a custom GPT store finder to enhance user interactions with AI. Overall, it serves as a valuable directory for exploring and utilizing different GPT-powered chatbot solutions.

Name: satellitecomponent/Neurite
Description: Neurite blends the complexity of fractal mathematics with mind-mapping techniques to create an interactive digital workspace. The tool uses concepts from chaos theory and graph theory to reveal patterns and organize AI-driven content. It provides features like real-time fractal navigation, customizable fractal displays, and a multi-agent interface for collaborative communication. With unique integrations such as FractalGPT and a Neural API, Neurite enables structured and non-linear memory mapping for enhanced user interaction.

Name: emcie-co/parlant
Description: Parlant is a comprehensive framework designed to empower developers to control the behavior of AI agents in customer-facing applications. It allows rapid deployment of LLM agents with dynamic conversational management and precision through structured behavioral guidelines. The framework features self-critique mechanisms, content-filtering, and a sandbox UI for real-time adjustments and testing. Built with a focus on reliability and consistency, it is aimed at maintaining high-quality agent interactions and ensuring adherence to business rules. With native API clients and continuous development by industry experts, Parlant provides a robust solution for modern customer engagement challenges.

Name: topoteretes/cognee
Description: Cognee offers a production-ready memory layer for AI applications by implementing scalable and modular ECL pipelines, designed to extract, cognify, and load various data sources. The system integrates conversations, documents, and audio transcriptions to build a comprehensive memory that aids AI agents. By merging graph and vector databases, it uncovers hidden relationships and patterns, facilitating robust data analysis. Its design aims to reduce hallucinations, developer effort, and costs while providing flexibility across different use cases. Extensive documentation and community support further enhance its usability in complex AI workflows.

Name: antgroup/agentUniverse
Description: agentUniverse is a Python-based framework designed to create and deploy intelligent agents that work collaboratively using large language models. The project emphasizes flexible multi-agent patterns, such as the PEER and DOE patterns, to break complex tasks into manageable steps and integrate domain expertise. It provides extensive documentation and multiple templates for building both single and multi-agent applications. Additionally, it offers a visual agentic workflow platform and has been tested in real-world business scenarios. The framework is supported by academic research, ensuring its methods are robust and innovative.

Name: pskrunner14/trading-bot
Description: The project implements a stock trading bot that learns optimal trading strategies via deep Q-learning, a model-free reinforcement learning method. It leverages various enhancements such as fixed target distribution and double DQN to improve learning outcomes. The trading agent is trained on historical stock data from GOOG and evaluated on subsequent data with visualizations provided through a Jupyter notebook. Designed for educational purposes, the project simplifies complex reinforcement learning techniques for ease of understanding and practical application. Overall, it provides a hands-on approach to studying reinforcement learning in a financial trading context.

Name: lmnr-ai/flow
Description: Flow is a task engine designed to simplify the development of stateful AI agents, focusing on simplicity and flexibility. It utilizes a dynamic task queue system that supports concurrent execution, dynamic scheduling of tasks at runtime, and smart dependencies for clearer control flow. The engine allows for parallel execution, dynamic routing, and streaming results without the need for complex threading code. Auto-instrumentation using Laminar is integrated for tracing and debugging, which enhances observability and state reconstruction. Overall, Flow provides a bloat-free and powerful platform for building custom AI agents and orchestrating their tasks in Python.

Name: victordibia/autogen-ui
Description: The project offers a simple starting point for building a web interface that communicates with the AutoGen AgentChat API. It integrates a Next.js frontend with a FastAPI backend to demonstrate multi-agent interactions via an 'agent team' configured through a JSON file. The repository includes examples and tutorials on how to interact with and extend the functionality of the agent system. It serves as a practical toolkit for developers interested in prototyping multi-agent conversational interfaces. Overall, it acts as a bridge between the underlying multi-agent framework and user-driven frontends.

Name: e2b-dev/e2b-cookbook
Description: The e2b-cookbook repository contains a variety of examples and guides designed to help developers build applications using the E2B SDK. It offers practical use cases in both Python and JavaScript/TypeScript to showcase the integration of AI-driven code interpreters and multi-agent frameworks. The documentation covers a range of topics from data analysis to interactive UI creation, demonstrating the versatility of the E2B SDK. It also includes integrations with popular AI frameworks and providers like LangChain, OpenAI, Anthropic, and Meta, making it a comprehensive resource for understanding AI agent technologies. Overall, it serves as an educational cookbook for developers looking to leverage AI and autonomous agent capabilities in their applications.

Name: simular-ai/Agent-S
Description: Agent S is an innovative open-source framework designed to enable autonomous computer interaction through intelligent GUI agents. It supports multiple operating systems including Linux, Windows, and MacOS, with detailed installation and setup instructions provided. The framework integrates with various APIs, such as OpenAI and Anthropic, and utilizes components like Perplexica for web knowledge retrieval and an OCR server for screen analysis. With its modular Python-based architecture, Agent S allows users to deploy and control GUI agents through both CLI and SDK interfaces. This project combines automation and AI technologies to mimic human-like interactions with computers.

Name: video-db/Director
Description: Director is a groundbreaking framework designed to build AI-powered video agents that can perform complex video tasks such as search, editing, and generation using natural language commands. It features a robust reasoning engine that orchestrates multiple agents to work together efficiently. The platform provides a sleek, chat-based interface with integrated video playback and interactive controls, making it user-friendly and flexible. Built on top of VideoDB's video-as-data infrastructure, Director is highly customizable and suitable for developers, creators, and teams aiming to simplify media workflows. The project leverages cutting-edge AI and GenAI APIs to unlock innovative possibilities in video processing.

Name: TEN-framework/ten_framework
Description: TEN, short for Transformative Extensions Network, is a sophisticated framework that facilitates the development of voice-based and multimodal AI agents. It enables real-time interactions across various platforms and languages, including support for high-performance audio-visual communication and dynamic agent state management. The framework is designed to be modular and flexible, allowing seamless integration between edge and cloud environments for optimal performance and resource utilization. Additionally, TEN’s architecture supports a range of applications from live language translation to interactive multimedia experiences, making it ideal for complex AI-driven solutions.

Name: Pravko-Solutions/FlashLearn
Description: FlashLearn is a Python-based framework designed to simplify the integration of Large Language Models into standard workflows and ETL pipelines through JSON-defined tasks. It provides a simple interface and orchestration for incorporating agent LLMs for tasks such as data transformation, classification, and summarization. The framework supports multiple LLM providers, including OpenAI, LiteLLM, Ollama, and others, ensuring flexibility and broad compatibility. Its modular approach, which includes learning and executing custom skills, makes it a versatile tool in modern machine learning pipelines.

Name: pgalko/BambooAI
Description: BambooAI is an experimental Python library that leverages large language models to enable natural language conversations for data analysis and visualization. It allows users to interact with their datasets or external sources using simple English commands, making data analysis accessible to those without programming expertise. The library dynamically generates and executes Python code to provide insights and visualizations, while also integrating internet searches and external API calls for comprehensive data retrieval. Additionally, BambooAI incorporates debugging and error correction mechanisms to ensure the accuracy of its outputs. Its versatile design supports both local and external data sources, streamlining workflows for data analysts.

Name: i-am-bee/beeai-framework
Description: BeeAI Framework is an open-source library for building production-ready multi-agent systems, available in both Python and TypeScript. It provides robust tools for creating workflows, managing memory, and integrating with various AI service providers to optimize agent deployment. The framework supports customizable agent architectures including out-of-the-box agents like the ReActAgent and features advanced error handling and diagnostic logging. It is designed for extensibility by allowing users to incorporate custom tools and middleware solutions. Extensive documentation, examples, and a growing roadmap ensure that developers can quickly deploy complex multi-agent systems.

Name: langgenius/dify
Description: Dify is an open-source platform designed for developing and deploying applications that leverage large language models (LLMs). It features an intuitive visual interface that simplifies the creation of complex AI workflows, including agent-based processes and RAG pipelines. The platform supports a wide range of proprietary and open-source LLMs, offers built-in tools for crafting effective prompts, and includes observability features for monitoring performance. With capabilities for model management, integration via APIs, and backend-as-a-service, Dify helps users rapidly go from prototype to production. Its ease-of-use, low-code approach makes it accessible for both developers and non-coders.

Name: All-Hands-AI/OpenHands
Description: OpenHands, formerly known as OpenDevin, is an innovative platform that leverages AI-powered agents to perform tasks typically done by human developers. It offers functionalities such as code modification, command execution, API interactions, and web browsing, which streamline the software development process. The platform can be deployed via Docker and integrates with various LLM providers to support diverse development needs. Focused on single-user deployments, OpenHands emphasizes an efficient, automated approach to produce production-ready code with minimal manual coding. The project is community-driven, with comprehensive documentation, benchmark resources, and integration options to assist users in maximizing its potential.

Name: geekan/MetaGPT
Description: MetaGPT is a Python-based multi-agent framework that organizes and coordinates various GPT models to successfully complete complex software tasks. It simulates the dynamics of a software company by assigning distinct roles such as product manager, architect, and engineer to different agents. The system not only supports traditional programming workflows but also integrates advanced functionalities like a RAG module and data interpretation. With an emphasis on orchestrating agent-based roles, MetaGPT effectively automates multi-step processes and generates comprehensive project outputs. Extensive documentation and research papers further underline its innovative approach in multi-agent collaboration.

Name: reworkd/AgentGPT
Description: AgentGPT is an open-source platform that enables users to assemble, configure, and deploy autonomous AI agents directly in the browser. It features a seamless setup with a FastAPI backend and a Next.js frontend, providing an intuitive interface for creating custom AI agents. Users can define and launch agents with specific goals, where the agents autonomously plan and execute tasks while learning from the outcomes. The project includes comprehensive documentation, setup scripts, and a public roadmap that outlines upcoming features and enhancements. Its integration of multiple technologies and emphasis on autonomous AI make it a compelling framework for experimenting with intelligent agents.

Name: feder-cr/Jobs_Applier_AI_Agent_AIHawk
Description: Jobs_Applier_AI_Agent_AIHawk is an innovative AI-driven tool designed to revolutionize the job application process by automating repetitive tasks. The project aims to help job seekers by streamlining application procedures that often require extensive manual input. Built using Python, it leverages automation techniques to auto-fill application forms and generate customized resumes. Although automation on LinkedIn was removed in compliance with platform policies, the project is pivoting towards a new AI-driven job board solution. It is maintained by an open-source community that welcomes contributions and feedback to further enhance its capabilities.

Name: khoj-ai/khoj
Description: Khoj is a self-hostable AI personal assistant application designed to enhance your abilities to retrieve and organize information from both web and local sources. The project supports versatile communication by enabling chats with various local and online large language models. It allows users to create custom agents with tunable personalities and specialized tools, making it a highly customizable solution for research and information management. Khoj offers multiple interfaces including browser, desktop, and mobile, and emphasizes privacy by being available for self-hosting. Its integration of automation features and advanced semantic search makes it a powerful tool for streamlining research processes.

Name: mem0ai/mem0
Description: Mem0 is an innovative open-source memory layer designed to empower AI agents and assistants with personalized memory capabilities. It features multi-level memory retention, including user, session, and AI agent histories, making interactions more context-aware. The project offers a developer-friendly API for easy integration with various language models and platforms. Users have the flexibility to self-host the solution or opt for a fully managed service with advanced analytics and enterprise security. Overall, Mem0 enhances user experiences in applications such as customer support chatbots, AI assistants, and personalized digital companions.

Name: assafelovic/gpt-researcher
Description: GPT Researcher is an autonomous deep research agent designed to perform comprehensive research using both web and local sources. It deploys a multi-agent system that includes planner and execution agents to generate questions, scrape relevant data, and compile detailed reports with citations. The project emphasizes accuracy, reliability, and the mitigation of misinformation by leveraging parallelized workflows and multi-source aggregation. Its architecture supports customization according to specific research needs and integrates robust front-end solutions for report visualization. Overall, the project aims to provide users with factual and extensive research outcomes efficiently.

Name: SWE-agent/SWE-agent
Description: SWE-agent is an AI-driven autonomous framework designed to automate complex tasks such as GitHub issue resolution, web operations, and offensive cybersecurity challenges. The framework leverages configurable agent-computer interfaces to allow language models like GPT-4 and Claude to use external tools effectively. It includes specialized features such as a debugger, summarizer, and a dedicated mode for solving Capture The Flag cybersecurity challenges, known as EnIGMA. Developed by researchers from Princeton and Stanford, SWE-agent offers extensive documentation, active community support on Discord, and advanced integration with environments like GitHub Codespaces. Overall, it serves as a robust tool for automating a wide range of software engineering and cybersecurity tasks.

Name: e2b-dev/awesome-ai-agents
Description: This repository compiles a curated list of AI autonomous agents into a GitHub repository for easy exploration and discovery. It is organized into sections for open source projects and closed-source projects, allowing users to quickly navigate and find relevant information. The README provides detailed instructions on how to contribute via pull requests and forms while also linking to a web interface for a more interactive experience. The project emphasizes the aggregation and categorization of AI agents and related tools, serving as a centralized resource. Its purpose is to assist developers and enthusiasts in finding innovative AI agent projects.

Name: CherryHQ/cherry-studio
Description: Cherry Studio is a desktop application that integrates with multiple LLM providers, offering AI-assisted document processing and interaction across Windows, Mac, and Linux. It supports diverse AI assistants that enable users to engage in multi-model conversations and custom assistant creation. The application also incorporates features for processing various document formats including text, images, PDFs, and more, along with powerful tools for file management and visualization. With a user-friendly interface, Cherry Studio requires no environment setup and provides practical functionalities such as global search, code syntax highlighting, and drag-and-drop organization. Overall, it is designed to streamline workflow automation and enhance productivity using AI agents.

Name: botpress/botpress
Description: Botpress is an open-source platform designed for building and deploying advanced chatbots and virtual assistants powered by GPT/LLM technology. It provides a range of developer tools, including a CLI, SDK, and API client, that facilitate integration and customization of chatbot functionalities. The platform supports a cloud-based environment with a dedicated studio for managing agents and integrations, as well as offering code-based bot examples for experienced developers. Botpress encourages community contributions and offers a scalable solution for rapid deployment of chatbot applications. Its comprehensive ecosystem makes it a strong candidate for anyone looking to implement AI-driven conversational solutions.

Name: dzhng/deep-research
Description: Deep Research is an AI-powered research assistant that iteratively performs deep research by combining search engines, web scraping, and large language models. The project is designed to refine its research direction based on initial queries and subsequent findings, enabling a dynamic exploration of any topic. It features intelligent query generation, adjustable depth and breadth settings, and concurrent processing capabilities to enhance research efficiency. The findings are compiled into a comprehensive markdown report, making the research process transparent and reproducible. Built with simplicity in mind, the repository maintains a small code footprint to facilitate easy understanding and further development.

Name: dataelement/bisheng
Description: BISHENG is an enterprise-grade platform that provides a comprehensive orchestration framework for LLM applications. It features a flowchart-like UI for designing workflows that support loops, parallel processing, and human-in-the-loop interventions. The platform integrates a variety of third-party components and includes high-precision document parsing models for complex enterprise scenarios. It is used by industry-leading organizations and Fortune 500 companies to streamline application development and deployment. BISHENG also encourages community collaboration and sharing of best practices.

Name: WooooDyy/LLM-Agent-Paper-List
Description: This repository compiles a systematic survey of papers related to large language model-based agents and their applications. It details the conceptual framework of LLM-based agents, including components such as brain, perception, and action. The project offers a curated and continuously updated list of must-read papers, making it a valuable educational resource for researchers and enthusiasts. Regular updates and community contributions further enhance its relevance in the dynamic field of AI agents. The repository serves as both a comprehensive literature survey and an accessible guide for those interested in the evolution of AI agent technology.

Name: Upsonic/Upsonic
Description: Upsonic is a Python framework designed to enable production-ready multi-agent workflows by incorporating advanced reliability features such as verification layers, validator agents, and output evaluation mechanisms. It leverages the Model Context Protocol (MCP) for tool integration and supports secure runtime environments for agents. The project offers a comprehensive structure to handle both basic and complex agent tasks, including task distribution and direct LLM calls. With extensive documentation and practical examples, Upsonic provides a robust solution for organizations seeking to deploy trusted agent workflows. Its modular design and scalability make it adaptable for various use cases in AI-driven automation.

Name: microsoft/UFO
Description: UFO is a multi-agent framework developed by Microsoft that enables seamless interaction with the Windows OS through intuitive UI automation. The project employs specialized agents like HostAgent and AppAgent, which work in concert to execute user requests across various applications. It leverages multi-modal capabilities provided by GPT-4V to interpret and execute complex actions on the Windows interface. The framework is well-documented and supported with technical papers and demonstration videos, making it a robust tool for UI-focused automation. Its design allows for extensibility and integration of additional features such as multi-action mode and bash command support.

Name: Canner/WrenAI
Description: WrenAI is an open-source GenBI AI agent designed to help data-driven teams explore and analyze their data using natural language queries. It empowers users to generate Text-to-SQL queries, interactive charts, spreadsheets, and reports without writing code. With a focus on a user-centric UI/UX, the platform dynamically recommends follow-up queries to facilitate deeper data exploration. Integration with a variety of LLM models makes it a powerful tool for transforming raw data into actionable business insights. Overall, WrenAI aims to revolutionize business intelligence by simplifying data interactions through conversational interfaces.

Name: run-llama/rags
Description: RAGs is a Streamlit app that enables users to build custom ChatGPT experiences by creating a Retrieval Augmented Generation (RAG) pipeline over specified data. The application guides users through describing their task and dataset, setting up parameters such as top-k retrieval and summarization. It leverages a builder agent to generate a tailored configuration and a generated RAG agent that handles natural language queries over the data. The project emphasizes flexibility by allowing users to adjust configurations and integrate with various LLMs like OpenAI's models. Overall, it provides a user-friendly interface for creating dynamic AI-driven data querying pipelines.

Name: camel-ai/camel
Description: CAMEL is a Python-based multi-agent framework designed for exploring the scaling laws of agents. The framework enables extensive customization of agents and supports the development of sophisticated multi-agent systems with advanced collaboration features. It integrates with numerous external tools and provides transparent internal structure along with detailed documentation for ease of use. CAMEL is versatile, supporting applications ranging from task automation to simulated environments, and includes tutorials, demos, and examples to help users get started quickly.

Name: modelscope/agentscope
Description: AgentScope is an innovative, Python-based platform designed to simplify the development of multi-agent applications powered by large language models. It provides a user-friendly drag-and-drop workstation and comprehensive documentation, enabling developers to easily integrate and manage various AI model services. The platform features robust fault-tolerance mechanisms and an actor-based distribution model to ensure stability and scalability. By supporting both local models and third-party APIs, AgentScope offers a versatile environment for building cutting-edge AI solutions.

Name: modelscope/ms-swift
Description: ms-swift provides a comprehensive and lightweight infrastructure for training, fine-tuning, and deploying over 450 large language models and 150+ multi-modal models. It leverages state-of-the-art techniques such as LoRA, QLoRA, distributed training, and model quantization to optimize performance and efficiency. The framework integrates advanced inference acceleration tools like vLLM and LMDeploy, and offers a user-friendly Gradio-based UI for streamlined deployment. With extensive documentation and community support, ms-swift covers the entire pipeline from model training to evaluation. Notably, it also introduces agent training capabilities based on recent AI research.

Name: superagent-ai/superagent
Description: Superagent is an open-source platform that lets developers add advanced AI agents to their applications through an easy-to-use API. It supports both Python and TypeScript SDKs, enabling seamless integration with various technologies. The framework leverages large language models and retrieval augmented generation to deliver functionalities like memory, streaming, and workflow automation. It facilitates the creation of chatbots, co-pilots, and content generation systems, and is backed by Y Combinator. Its comprehensive documentation and tutorials assist developers in integrating AI assistants into their projects.

Name: TencentQQGYLab/AppAgent
Description: AppAgent is implemented in Python and is designed to control smartphone applications using LLMs such as GPT-4V. The framework supports both autonomous exploration and learning from human demonstrations to perform app operations. It simplifies actions by mimicking human interactions like tapping and swiping on mobile interfaces. Detailed configuration guidelines and evaluation benchmarks are provided to facilitate deployment. Through its multimodal design, AppAgent demonstrates a novel approach to integrating LLM-based decision-making with mobile device operation.

Name: TaskingAI/TaskingAI
Description: TaskingAI is an open-source platform designed for developing and deploying AI-native applications that utilize LLM-based agents. The platform integrates hundreds of LLM models through a unified API, supporting both stateful and stateless operations for versatile agent management. Its modular architecture decouples AI logic from client-side product development, enabling seamless multi-tenant deployments. With an intuitive UI console, Docker-based setup, and asynchronous support via Python FastAPI, TaskingAI offers a robust solution to address limitations in existing frameworks. It empowers users to build and customize AI agents with advanced tools, RAG systems, and integrated plugins.

Name: TEN-framework/TEN-Agent
Description: TEN Agent is a versatile real-time conversational AI framework that integrates multiple advanced technologies to offer enriched communication experiences. The project supports integrations with voice, multimodal inputs, and various APIs to deliver interactive and dynamic conversations. It also offers compatibility with hardware platforms like the ESP32 and integrates with platforms like DeepSeek, Dify, and Google Gemini. The comprehensive documentation and modular design make it accessible for both development and prototyping, encouraging an expansive use-cases. Overall, TEN Agent serves as a dynamic and extensible tool in the evolving landscape of conversational AI.

Name: OpenBMB/AgentVerse
Description: AgentVerse is a comprehensive framework designed for deploying and simulating multiple LLM-based agents across a range of applications. It offers two main frameworks: a task-solving framework for collaborative multi-agent problem solving and a simulation framework for creating custom environments to observe agent behaviors. The project is implemented primarily in Python, as indicated by its dependency on Python 3.9+, and includes various demos and papers that showcase its capabilities. With support for applications ranging from software development to game simulation and even social behavior research, AgentVerse stands out as a versatile tool in the AI agent ecosystem.

Name: InternLM/xtuner
Description: XTuner is an advanced toolkit designed to fine-tune large language models and vision-language models efficiently. It supports various models including InternLM, Llama2, ChatGLM, and others with extensive customization and optimization. The toolkit offers seamless integration with high-performance operators and scaling techniques like FlashAttention, Triton, and DeepSpeed for accelerated training. With a well-designed data pipeline and support for agent fine-tuning, XTuner simplifies continuous pre-training and instruction fine-tuning. It also provides utilities to connect with deployment toolkits and evaluation frameworks, making it a one-stop solution for large model tuning.

Name: xlang-ai/OpenAgents
Description: OpenAgents is an open-source platform that democratizes access to language agents by offering a chat-based interface for automating tasks. It hosts multiple agents including a Data Agent for analytics, a Plugins Agent that integrates with over 200 third-party tools, and a Web Agent for autonomous browsing. The platform highlights an easy deployment process with an emphasis on both developer and non-expert user experiences. Comprehensive documentation, an accompanying academic paper, and active community support further bolster its utility in real-world applications. Overall, OpenAgents serves as a robust foundation for the research, development, and testing of innovative language agents.

Name: BuilderIO/micro-agent
Description: Micro Agent is a small, focused AI agent designed to iteratively generate and debug code based on test cases provided. It automates the cycle of writing tests and then generating code to meet those tests, reducing manual iteration overhead. Built for Node.js and installed via npm, the agent leverages popular LLM providers like OpenAI and Anthropic to improve code quality. The project emphasizes a minimalist approach, avoiding the complexity of full-scale developer agents while integrating advanced techniques such as visual matching and design integration. It serves as a tool for incremental code development and optimization in a test-driven environment.

Name: X-PLUG/MobileAgent
Description: Mobile-Agent is a comprehensive mobile device operation assistant that leverages multi-agent collaboration for enhanced performance in complex tasks. The project features a family of agents including Mobile-Agent-E, Mobile-Agent-v2, and Mobile-Agent-v3, each tailored for different operation scenarios and capabilities. It demonstrates self-evolution by incorporating past experiences, and provides demos and detailed documentation along with academic citations. Moreover, the framework supports both mobile and PC platforms, emphasizing its adaptability and advanced design. Overall, the project serves as a significant contribution to the field of autonomous mobile operation through innovative multi-agent strategies.

Name: entropy-research/Devon
Description: Devon is an innovative open-source pair programmer that leverages multi-model AI integration to assist developers in coding tasks. The project provides both a backend agent and a modern user interface, including an Electron app and a terminal-based UI, ensuring versatility in different development environments. It supports popular AI APIs such as Anthropic and OpenAI, enabling seamless integration and efficient workflow management. With features like multi-file editing, codebase exploration, test writing, and bug fixing, Devon aims to enhance productivity and streamline software development. The project is community-driven, welcoming contributions and feedback to continuously improve its capabilities.

Name: daveshap/OpenAI_Agent_Swarm
Description: The Hierarchical Autonomous Agent Swarm (HAAS) is a multi-tiered system that utilizes OpenAI's agent-based APIs to create a self-organizing and ethically governed framework for autonomous agents. It features a structured hierarchy with a Supreme Oversight Board, Executive Agents, and specialized sub-agents that collaboratively manage complex tasks. The project emphasizes full autonomy, allowing agents to self-direct, self-correct, and self-improve while adhering to a strict ethical governance model. Additionally, HAAS includes interactive chat endpoints, serving as a modern interface for users to engage with the system. Overall, the project pioneers a novel approach to AI governance by integrating ethical considerations into its operational design.

Name: 0xPlaygrounds/rig
Description: Rig is a Rust library that enables developers to build scalable, modular, and ergonomic LLM-powered applications with minimal boilerplate. The library provides common abstractions over LLM providers like OpenAI and vector stores to simplify integration. It is designed to support robust LLM completion and embedding workflows, making it easy to incorporate advanced AI capabilities into applications. With extensive documentation, examples, and integrations, Rig aims to streamline the development process for LLM-based apps. Overall, it offers a solid, minimalist foundation for creating intelligent applications in Rust.

Name: modelscope/modelscope-agent
Description: Modelscope-Agent is a highly adaptable framework designed for building customizable agent systems that integrate open-source large language models with real-world tools and workflows. The platform offers functionalities such as role-playing, tool usage, planning, and memory management, making it easy to implement diverse agent applications. It provides a unified interface with rich LLM interfaces and built-in utilities including code interpretation, web browsing, and more. With low coupling and high extensibility, developers can quickly expand and tailor agent functionalities for various use cases. The framework also supports enhanced workflow orchestration, making it a robust tool for deploying multi-agent systems.

Name: AgentOps-AI/agentops
Description: AgentOps provides a robust Python SDK that enables developers to observe, debug, and benchmark AI agents across various frameworks. It offers features like session replays, analytics, and LLM cost management to streamline agent performance monitoring. The platform integrates with popular AI frameworks such as CrewAI, AG2, Camel AI, and Langchain. With easy initialization and minimal code adjustments, it ensures a seamless developer experience from prototype to production. Its comprehensive toolset helps maintain compliance and security while tracking agent activities effectively.

Name: muellerberndt/mini-agi
Description: MiniAGI provides a lightweight autonomous agent framework built in Python that leverages advanced OpenAI models such as GPT-3.5-Turbo and GPT-4. It is designed with a minimal set of tools and incorporates techniques like chain-of-thought reasoning, short-term memory, and self-criticism to enhance autonomous functionality. The framework is easy to install and use, making it accessible for developers experimenting with AI agents. It comes with diverse examples ranging from drawing images and building websites to performing penetration tests, showcasing its versatility. Overall, MiniAGI balances simplicity with powerful capabilities, encouraging safe and innovative use of autonomous agents.

Name: SylphAI-Inc/AdalFlow
Description: AdalFlow is a Python-based library designed to build and auto-optimize language model workflows. The framework provides a unified approach to handling tasks such as chatbots, retrieval-augmented generation (RAG), and AI agent-based applications. It leverages techniques like zero-shot and few-shot prompt optimization to enhance accuracy and performance. The library is modular and PyTorch-like, making it accessible for building custom LLM pipelines.

Name: bytedance/UI-TARS-desktop
Description: UI-TARS Desktop is a graphical user interface application that allows users to control their computer through natural language commands. Built on the UI-TARS Vision-Language Model, it offers robust and secure local processing along with cross-platform support for both Windows and macOS. The project incorporates features like precise mouse and keyboard control, screenshot capture, and real-time status display. It also provides multiple deployment options including cloud and local setups using vLLM, ensuring flexibility in various environments. Accompanied by detailed documentation and links to academic research, the project integrates AI-driven agent capabilities into a user-friendly desktop interface.

Name: cheshire-cat-ai/core
Description: Cheshire Cat AI is a dockerized, API-first framework that allows developers to create custom AI agents. It provides a conversational layer via WebSocket and REST API, integrating with language models using langchain. The framework includes built-in retrieval augmented generation (RAG) using Qdrant and supports plugins for extended functionality. An admin panel and multiuser support make it easy to manage agents, while its modular design enables customization through hooks and tools. Overall, it streamlines developing AI microservices with a focus on conversational experiences.

Name: semanser/codel
Description: Codel is a fully autonomous AI agent that automates complex tasks using terminals, browsers, and editors. It runs securely in a sandboxed Docker environment with built-in tools such as a browser for fetching web information and a text editor for code review. The project is self-hosted and integrates seamlessly with multiple services including PostgreSQL for logging historical commands and outputs. With features like automatic Docker-image selection and modern UI design, Codel provides a unique platform for performing intricate development and automation tasks. The project leverages state-of-the-art research and robust integrations to foster autonomous task execution.

Name: jackmpcollins/magentic
Description: Magentic is a Python library that seamlessly integrates large language models into standard Python code using intuitive decorators like @prompt and @chatprompt. It allows developers to build complex agentic systems by combining LLM queries with traditional Python functions, ensuring structured outputs and enhanced observability. The project supports features such as streaming outputs, LLM-assisted retries, and type annotations to improve the developer experience. With configuration options for multiple LLM providers and support for asynchronous operations, Magentic offers a flexible and lightweight framework for modern AI-driven workflows.

Name: samchon/nestia
Description: Nestia provides a suite of helper libraries for NestJS built in TypeScript that facilitates rapid AI chatbot development and enhanced application performance. It includes features such as super-fast decorators, advanced WebSocket routes, and a robust Swagger document generator. The toolkit streamlines SDK generation with a mock simulator for client applications and automates E2E test functions, ensuring high-quality software development. Additionally, it offers comprehensive performance benchmarking and an online TypeScript editor integrated with Swagger-UI, making it an all-in-one solution for modern NestJS applications.

Name: fiatrete/OpenDAN-Personal-AI-OS
Description: OpenDAN is an open source Personal AI Operating System that integrates diverse AI modules to enable the creation and management of AI agents. It offers a comprehensive suite of built-in agents including a personal assistant, information manager, and language tutor, each designed to perform specific tasks. The system supports rapid installation via Docker and provides seamless integration with various services, facilitating complex workflows among multiple AI agents. Its design emphasizes interoperability and user control, making it easy to customize and extend for personal or developmental purposes. Overall, OpenDAN represents a flexible, modular approach to personal AI systems.

Name: om-ai-lab/OmAgent
Description: OmAgent is a Python library that streamlines the creation of multimodal language agents with a focus on simplicity and ease of use. The framework abstracts complex tasks like worker orchestration, task queuing, and node optimization, allowing developers to focus on building rich agent functionalities. It supports a wide range of modalities including text, images, videos, and audio, making it versatile for both research and production. The project also offers a graph-based workflow orchestration engine and various agent components to facilitate scalable and reusable multimodal agents. With features such as native support for VLM models and local deployment options, OmAgent provides a robust foundation for building sophisticated language agents.

Name: microsoft/RD-Agent
Description: RD-Agent is designed to streamline the critical parts of industrial research and development by automating both idea generation and implementation using AI-driven agents. The project features specialized agents such as Kaggle Agent, Data Mining Agent, and Research Copilot to manage model tuning, data processing, and research paper analysis. It offers a live demo, comprehensive documentation, and a robust installation procedure via Docker and Conda, making it accessible for industrial applications. Built in Python and available on PyPI, RD-Agent underscores the potential of AI to revolutionize R&D workflows. Its integration of modern automation techniques highlights its innovative contribution to industrial R&D processes.

Name: xlang-ai/OSWorld
Description: OSWorld is a comprehensive benchmarking tool designed to evaluate multimodal agents in realistic computer environments. The project provides a robust framework for executing and analyzing agent performance across different virtualization platforms such as VMware, VirtualBox, and Docker. It offers detailed instructions for installation, setup, and running experiments, including baseline agent evaluations. With support for various deployment environments and integration of evaluation tools, OSWorld helps researchers and engineers to systematically test and improve agent capabilities. The accompanying documentation, paper, and data viewer further enhance its value as an educational and research resource.

Name: eylonmiz/react-agent
Description: ReactAgent is an experimental tool that leverages the GPT-4 language model to autonomously generate React components from detailed user stories. It is built using modern web technologies such as React, TailwindCSS, Typescript, and UI libraries like Radix UI and Shadcn UI. The platform demonstrates the potential for AI agents to streamline the component development process by converting user narratives into executable code. The project offers both backend and frontend components, allowing users to customize workflows and integrate their own design systems. It serves as an innovative prototype in the intersection of AI and UI development.

Name: refly-ai/refly
Description: Refly is an innovative platform designed to empower users to seamlessly transform their ideas into production-ready content. It combines a free-form canvas interface with multi-threaded dialogues and intelligent search capabilities to support complex, agentic workflows. The engine integrates a variety of AI-powered tools including web search, knowledge base integration with RAG, and a WYSIWYG AI editor. It offers both cloud and self-hosted deployment options, making it versatile for different user needs. Additionally, the tool emphasizes human-AI collaboration, enabling dynamic interaction and contextual memory to enhance content creation.

Name: OpenAutoCoder/Agentless
Description: Agentless is designed to automatically diagnose and fix bugs in software by localizing faulty code, generating multiple candidate patches, and validating the patches using regression tests. It follows a simple three-phase process comprising localization, repair, and patch validation to address software issues effectively. The project is implemented in Python and integrates with state-of-the-art LLM models such as Claude 3.5 Sonnet for enhanced performance. It has been benchmarked on SWE-bench lite and verified via extensive experiments as detailed in its associated research paper. Overall, Agentless presents a minimalist yet effective approach to automated software bug fixing and testing.

Name: heshengtao/comfyui_LLM_party
Description: ComfyUI LLM Party is a framework designed to build customizable LLM workflows by integrating a complete set of nodes into the ComfyUI front-end. It enables users to construct complex agent interaction modes, including both single-agent pipelines and multi-agent ring interactions for AI assistants. The project supports various LLM invocation methods, whether through APIs, local models, or distributed configurations, and also includes specialized nodes for image hosting and VLM integration. Detailed documentation, workflows, and a quick start guide are provided to help users set up and experiment with different configurations. The flexible design facilitates rapid prototyping and integration into existing creative pipelines.

Name: AgentEra/Agently
Description: Agently is a Python development framework designed to build AI agent native applications quickly and easily. It enables developers to integrate AI agents into their business logic with minimal code by allowing agents to act like functions. The framework offers a variety of code examples and step-by-step guides, including demonstrations for SQL generation, survey feedback, and other application use cases. Its extensive documentation and interactive examples help users understand the nuances of developing with AI agents.

Name: MLSysOps/MLE-agent
Description: MLE-Agent is designed to support both machine learning engineers and researchers by automating key aspects of the ML development pipeline. It offers features like autonomous baseline creation, smart debugging, and participation in Kaggle competitions. The tool integrates with resources such as Arxiv and Papers with Code to bring state-of-the-art methods and best practices to users. Its interactive CLI chat and web interface further enhance user experience, enabling efficient project management and troubleshooting. Overall, MLE-Agent acts as an intelligent companion to streamline the AI engineering process.

Name: SamurAIGPT/GPT-Agent
Description: Camel AutoGPT enables users to create and deploy multiple autonomous AI agents that interact and work together towards a common goal. The project provides a platform where users can name custom AI characters and set them off on various tasks. It includes features such as saving agent runs, sharing conversations, and plans for enhancements like web browsing and document API integration. The tool simplifies the configuration of complex multi-agent systems through an intuitive setup process.

Name: starpig1129/DATAGEN
Description: DATAGEN is a comprehensive AI-driven multi-agent platform designed for automating hypothesis generation, data analysis, and report writing. The system leverages advanced technologies like LangChain, OpenAI's GPT models, and LangGraph to enable intelligent workflow orchestration across various data processing tasks. It offers versatile usage options through Jupyter Notebook and direct Python scripts, providing robust support for enterprise-grade data analysis. With specialized agents managing tasks ranging from data cleaning to dynamic visualization, DATAGEN ensures streamlined research and consistent execution of complex projects. The platform is designed to optimize research processes and facilitate in-depth data insights for its users.

Name: PrefectHQ/ControlFlow
Description: ControlFlow is a Python framework designed for constructing and managing structured, agentic AI workflows. It enables developers to break down complex processes into discrete, observable tasks that can be delegated to specialized AI agents. The framework supports multi-agent orchestration, allowing for the seamless integration of various AI-powered tasks within a unified flow. With features such as native observability and structured results, ControlFlow ensures transparency and control while leveraging the capabilities of modern LLMs. Detailed documentation and examples make it accessible for developers looking to build robust AI-powered applications.

Name: zchoi/Awesome-Embodied-Agent-with-LLMs
Description: This repository is a carefully maintained curated list of research papers and resources in the field of embodied AI and LLM-based agents. It includes surveys, benchmarks, and cutting-edge research developments, showcasing the latest trends and achievements. The list covers various aspects of embodied intelligence from simulation to real-world applications. It serves as a comprehensive guide for researchers and practitioners interested in agent evolution and multimodal interaction. The repository is regularly updated with new findings and innovations in the dynamic field of AI agents.

Name: HCPLab-SYSU/Embodied_AI_Paper_List
Description: This repository offers a comprehensive paper list and survey on Embodied Artificial Intelligence, emphasizing recent research and advancements in bridging the digital and physical realms. It curates a wide array of literature covering topics like embodied perception, interaction, and agent design alongside sim-to-real adaptation challenges. The project is actively maintained with regular updates, ensuring that the latest scholarly contributions are included. It serves as an invaluable resource and reference for both academic researchers and practitioners in the field of embodied AI.

Name: HumanSignal/Adala
Description: Adala is a Python framework designed to create autonomous agents that excel in data labeling and processing tasks. The framework enables agents to autonomously acquire and refine skills by iteratively interacting with provided ground truth datasets and adjusting to their environment. It supports integration via command line, RESTful API, and direct usage within Python notebooks, making it versatile for various use cases in AI and machine learning. With robust features that include customizable runtimes and self-learning mechanisms, Adala offers flexibility and reliability in deploying intelligent data processing agents. The framework is particularly tailored for AI engineers, machine learning researchers, and data scientists looking to streamline agent-based data processing workflows.

Name: NirDiamant/Controllable-RAG-Agent
Description: This project implements an advanced Retrieval-Augmented Generation (RAG) agent powered by sophisticated graph algorithms to tackle complex questions. It leverages deterministic graphs as the agent's 'brain' to ensure controlled and precise reasoning over custom datasets. The solution includes multi-step processing tasks such as PDF loading, text preprocessing, summarization, and vector store encoding. Users can interact with the agent via a Streamlit interface, and the pipeline evaluates model performance using Ragas metrics. Moreover, the repository offers comprehensive guidance and notebooks to help users navigate and understand RAG techniques.

Name: ntasfi/PyGame-Learning-Environment
Description: PyGame Learning Environment (PLE) is a Python framework that provides a simulated environment for developing and testing reinforcement learning agents. It offers a suite of game simulations inspired by the Arcade Learning Environment, allowing researchers to focus on the design of learning models rather than environment setup. The framework supports rapid prototyping and offers built-in support for game logic and display options. PLE is designed to facilitate easy integration of various agent designs, and it also welcomes contributions in the form of additional games and improvements. Its documentation and active community make it a useful resource for both research and educational purposes.

Name: LLPhant/LLPhant
Description: LLPhant is a comprehensive PHP framework inspired by Langchain that leverages generative AI to build powerful applications using various LLM engines. It supports multiple AI models such as OpenAI GPT-4, Anthropic, Mistral, and Ollama, and integrates seamlessly with popular PHP frameworks like Symfony and Laravel. The framework provides a range of functionalities including chat, image processing, and semantic search, which makes it versatile for different generative AI use cases. Extensive documentation and tutorials help developers to quickly get started and understand the potential of building autonomous AI agents. Its design emphasizes simplicity and scalability, empowering developers to create robust AI-driven applications.

Name: SkalskiP/awesome-chatgpt-code-interpreter-experiments
Description: This repository demonstrates experiments that explore and expand the capabilities of ChatGPT's Code Interpreter, enabling creative coding solutions. It showcases various applications ranging from data analytics to image conversions and code debugging in a sandboxed Python environment. Step-by-step guides illustrate how to bypass restrictions, integrate with Python and even execute JavaScript using Deno. Detailed instructions for jailbreaks, such as installing external packages and running advanced models like YOLOv8, further highlight the innovative use cases. Overall, the project serves as both an experimental playground and an educational resource for leveraging ChatGPT and its Code Interpreter.

Name: Planetary-Computers/autotab-starter
Description: Autotab is an AI-powered browser automation tool designed to record user actions and convert them into executable Python scripts. It utilizes Chrome and Selenium to capture browser interactions seamlessly. The tool provides an easy setup with a Python virtual environment and offers clear guidelines to configure and run automation tasks. Although currently in its alpha release, autotab aims to simplify the creation of auditable and reproducible automation workflows. The project is continuously evolving, inviting users to engage with its development through community channels.

Name: myshell-ai/AIlice
Description: AIlice is a fully autonomous, general-purpose AI agent that leverages open-source large language models to perform diverse tasks such as research, coding, system management, and literature reviews. It is designed as a standalone digital assistant, akin to JARVIS, enabling local execution of complex tasks with an intuitive interactive interface. The project utilizes a novel text computer architecture to integrate interactive agents and dynamically load modules for enhanced capabilities. With features including voice dialogue support and self-evolving agent frameworks, AIlice aims to push the boundaries of autonomous artificial intelligence. Its development roadmap envisions further expansion and integration of multi-modal functionalities, setting the stage for future innovations.

Name: showlab/ShowUI
Description: ShowUI is an open-source, lightweight vision-language-action model specifically designed for developing GUI agents. It provides an end-to-end framework that enables agents to interpret visual inputs and process language instructions to perform actions on computer interfaces. The project includes robust training pipelines, API calling features, and integration with Gradio for seamless local deployment. With support for iterative refinement and UI-guided token selection, ShowUI leverages cutting-edge techniques like vllm inference, DeepSpeed optimization, and multi-GPU training for efficient performance. Overall, it serves as a comprehensive toolkit that bridges research and practical applications in vision-language-action frameworks for GUI automation.

Name: yym68686/ChatGPT-Telegram-Bot
Description: TeleChat is a robust Telegram bot that integrates multiple large language model APIs, including GPT-3.5, GPT-4, and several others, to provide seamless conversational experiences. It supports multimodal inputs such as voice, images, and documents, enabling rich interactions for users. The bot offers advanced features including group chat topic mode, inline mode for easy access in any chat, and a comprehensive plugin system for web search, summarization, and more. It processes messages asynchronously to ensure smooth, efficient, and isolated dialogues among multiple users. With flexible deployment options and a user-friendly interface, TeleChat is designed to enhance conversational interactions on Telegram.

Name: TransformerOptimus/SuperCoder
Description: SuperCoder is an open-source autonomous software development system designed to streamline and automate coding, testing, and deployment tasks with the help of advanced AI agents. The platform integrates multiple programming languages and frameworks, supporting systems built with Go, Python, and JavaScript/TypeScript. It provides a user-friendly interface accessible via a browser and leverages Docker for easy deployment. The project is actively developed and encourages community contributions through forums and issue tracking. With a focus on operational automation, SuperCoder aims to enhance software development efficiency and reliability.

Name: taichengguo/LLM_MultiAgents_Survey_Papers
Description: This repository is a curated collection of research papers focused on large language model based multi-agents. It aggregates a diverse range of studies, surveys, and benchmark papers, providing insights into the progress and challenges in the domain of multi-agent systems. The repository presents categorized topics including multi-agent frameworks and orchestration strategies. It serves as an educational resource for researchers and enthusiasts looking to explore LLM-based multi-agent approaches. Overall, it is a valuable reference for understanding current trends and future directions in this evolving field.

Name: microsoft/maro
Description: MARO is a comprehensive platform that offers reinforcement learning as a service for optimizing resource allocation in industrial settings. It integrates a simulation toolkit, an RL toolkit, and a distributed toolkit to support multi-agent system development. The platform is designed to handle real-world challenges in areas such as container inventory management, bike repositioning, and virtual machine scheduling. Its modular design allows users to build, test, and deploy various decision-making strategies using reinforcement learning and operations research techniques. Overall, MARO serves as an essential tool for researchers and practitioners looking to optimize complex resource management problems.

Name: web-arena-x/webarena
Description: WebArena is a self-hostable web environment designed for building and evaluating autonomous agents in realistic settings. It leverages a setup similar to OpenAI Gym, making it easier to run reproducible experiments for autonomous agent research. The framework integrates with various tools like AgentLab and BrowserGym, and includes extensive documentation and scripts to support a wide range of experiment configurations. With built-in support for benchmarking and evaluation, researchers can easily assess agent performance across different tasks in web settings. The project also offers a comprehensive guide for setup, configuration, and end-to-end evaluation of the web environment.

Name: plurai-ai/intellagent
Description: IntellAgent is an advanced multi-agent framework that simulates realistic interactions to diagnose and optimize conversational agents. It generates thousands of edge-case scenarios to stress-test agents and uncover hidden performance issues. The framework provides comprehensive performance evaluations and actionable insights, allowing developers to enhance agent reliability before real-world deployment. Built primarily in Python, IntellAgent integrates easily with various LLM providers and offers visual analytics through tools like Streamlit. Its robust design makes it a valuable resource for improving conversational AI systems.

Name: chain-ml/council
Description: Council streamlines the development and deployment of generative AI applications by offering a unified and flexible platform that integrates multiple large language model providers such as OpenAI, Anthropic, and Google. The system is built in Python and features robust configuration management for setting model parameters and API credentials. It provides enterprise-grade monitoring and oversight capabilities to track usage, costs, and performance, ensuring reliability in production environments. Council is designed for scalability and ease of use, and it welcomes community contributions for ongoing enhancement.

Name: metauto-ai/GPTSwarm
Description: GPTSwarm is a Python-based framework that allows users to build and optimize graph-based LLM agents, facilitating the creation of intelligent agent swarms that can self-organize and self-improve. The framework is modular, featuring components for environment operations, graph processing, LLM interfacing, memory, and optimization to enhance agent performance. It provides detailed visualizations, demo notebooks, and quickstart guides to help users quickly integrate and experiment with its capabilities. The project is actively used in research and academic settings, evidenced by its presentations at major conferences and its published academic paper.

Name: Oneirocom/Magick
Description: Magick is a groundbreaking visual AIDE designed for building AI applications without coding by using a visual node-based environment. The project enables users to create powerful data pipelines and deploy multimodal agents including chatbots and intelligent reasoning systems. It features an intuitive interface that allows for easy drag-and-drop construction of complex workflows and data transformations. Magick also includes a variety of pre-built connectors and nodes to integrate with popular services, making it a versatile tool for rapid prototyping and AI experimentation. Overall, it offers a comprehensive environment for both beginners and experts to automate and innovate using AI.

Name: samre12/deep-trading-agent
Description: The project is a Deep Reinforcement Learning based trading agent designed for Bitcoin that leverages the Deep Sense network for Q function approximation. It provides a comprehensive framework for training a trading strategy using historical Bitcoin price data, including extensive data preprocessing and integration with TensorFlow for model implementation. Docker support is available for easy setup and deployment, and TensorBoard integration is used to monitor the training process. The repository also details the process of data collection, cleaning, and the design of the Deep Q Trading model along with numerous implementation insights. Overall, it serves as both a functional trading bot and a reference implementation for deep RL in financial markets.

Name: THUDM/CogAgent
Description: CogAgent is an open-source visual-language model-based GUI Agent that facilitates bilingual interactions through screen captures and natural language input. Developed by THUDM, the project leverages state-of-the-art techniques in GUI perception, reasoning, and multi-step operation. It has been recognized in top venues such as CVPR 2024 and is supported by a detailed technical blog and research paper. The project aims to serve as a robust tool for advancing the research and development of GUI agents. Its demonstrations highlight significant benchmarking results against both commercial and open-source solutions.

Name: e2b-dev/open-computer-use
Description: Open Computer Use is a secure cloud Linux computer powered by the E2B Desktop Sandbox that enables users to operate the system via keyboard, mouse, and shell commands. It integrates with over 10 different LLMs, offering easy swapping of AI models through configurable providers. The platform streams the live display of the sandbox to the client machine, creating an interactive and dynamic interface. With detailed documentation including setup instructions and an architecture overview, the project emphasizes both security and flexibility. Its design leverages open-source components and advanced AI capabilities to create a robust computer interface.

Name: LLaVA-VL/LLaVA-Plus-Codebase
Description: LLaVA-Plus provides a comprehensive system to build, train, and deploy large language and vision assistants capable of using tools for a variety of visual and conversational tasks. The project includes modules for launching a controller, model workers, and tool workers that interact through a Gradio web interface. It supports training pipelines with feature alignment and visual instruction tuning, and offers detailed instructions along with pre-trained weights. Designed for research, the codebase comes with extensive documentation, demos, and integration guidelines for multimodal AI applications. The framework effectively bridges language and vision capabilities for advanced tool-assisted AI agents.

Name: OSU-NLP-Group/SeeAct
Description: SeeAct is a robust platform designed for running autonomous web agents on live websites by leveraging large multimodal models. It connects agents with web browsers through an interface built using PlayWright, enabling efficient automated interactions and task execution. The project provides a Python package and a Chrome extension for flexible deployment and configuration through TOML files. It supports multiple modes, including crawler and demo modes, to customize automation tasks and evaluate performance. Backed by academic research, SeeAct integrates cutting-edge technology such as GPT-4V(ision) to push the boundaries of web automation.

Name: codefuse-ai/CodeFuse-muAgent
Description: muAgent is a cutting-edge agent framework driven by a Knowledge Graph Engine that orchestrates multi-agent interactions. The project leverages capabilities like LLM-guided function calling, code interpretation, and drag-and-drop UI for streamlined process automation. It integrates features such as intelligent debugging, visual monitoring, and tool registration to support complex DevOps scenarios. Additionally, the framework supports one-click deployment and offers a Python-based SDK for easy integration. Its comprehensive suite of tools aims at facilitating efficient online collaboration and high-level reasoning in automated workflows.

Name: Neph0s/awesome-llm-role-playing-with-persona
Description: This project is a curated collection of papers, resources, and news related to role-playing language models and persona-based agents. It compiles an extensive list of research papers and benchmark resources focused on character role-playing in large language models. The repository covers topics from multi-agent systems to personalized role-playing interactions, offering a valuable reference for both researchers and practitioners. It also highlights recent developments, survey papers, and news updates in the area of role-playing agents. Overall, it provides an organized gateway to explore academic and practical resources related to AI-based role-playing.

Name: aleju/mario-ai
Description: This project implements a deep reinforcement learning agent that is capable of autonomously playing the first level of Super Mario World. It leverages deep Q-learning combined with a spatial transformer network to process raw pixel data from game screenshots. The approach involves capturing sequences of game states, using convolutional networks and a replay memory to learn optimal actions based on reward signals. Detailed network architectures for both the main and localization networks are provided, illustrating its sophisticated design. The project also discusses limitations and challenges, such as handling more complex levels and gameplay dynamics.

Name: OpenBMB/IoA
Description: Internet of Agents (IoA) is an open-source framework designed to enable diverse AI agents to collaborate and tackle complex tasks using an internet-inspired connectivity model. The platform supports autonomous team formation and asynchronous task execution, ensuring efficient problem-solving through cooperative efforts. It integrates various AI agents, such as AutoGPT and Open Interpreter, thereby pooling distinct capabilities to address challenges that may be too intricate for a single agent. The framework is Docker-based and supports distributed deployment, making it scalable and flexible for different environments. Comprehensive documentation and an associated research paper further elaborate on its architecture and usage.

Name: lobehub/lobe-chat-agents
Description: Lobe Chat Agents Index is a central repository designed for indexing and managing chat agents on the LobeChat platform. It allows users to submit new agents easily by following clear template guidelines and making pull requests. The repository provides a curated list of agents complete with descriptions and configuration details to enhance user engagement. Community contributions are encouraged through a streamlined review process that supports diverse agent implementations. Overall, this platform facilitates effective discovery and management of AI-powered chat functionalities.

Name: lafmdp/Awesome-Papers-Autonomous-Agent
Description: This repository aggregates recent academic papers focused on autonomous agents, specifically highlighting research in RL-based and LLM-based approaches. It provides a curated list of surveys, benchmark studies, and classifications of papers across a range of topics in autonomous agent research. The collection includes papers from major conferences such as NeurIPS, ICLR, and ICML, making it a valuable resource for researchers and enthusiasts. It is actively maintained and encourages community contributions through issues for adding overlooked but relevant works. Overall, the repository serves as an educational resource and a curated collection for staying updated on advancements in autonomous agent research.

Name: icip-cas/PPTAgent
Description: PPTAgent, developed by icip-cas, leverages AI techniques to automatically generate and evaluate presentation slides from documents. It employs a two-phase process whereby the system first analyzes reference presentations and then generates structured, visually appealing slides. The project also introduces PPTEval, a comprehensive framework that assesses the quality of presentations across content, design, and coherence dimensions. With a Docker image, research paper, dataset, and extensive documentation provided, PPTAgent aims to streamline the slide creation workflow. This integration of automated generation and quality evaluation offers a robust solution for creating effective presentations.

Name: vircadia/vircadia-native-core
Description: Vircadia native core is the foundational component of an open source, agent-based metaverse ecosystem designed for creating immersive virtual worlds. It supports mass deployment of both human and AI agents, enabling dynamic interactions and a full sandbox experience. The project offers compatibility with multiple platforms including mobile, desktop, and VR, ensuring broad accessibility. With a vision toward integrated scripting capabilities using JavaScript and TypeScript and a full world editor, it aims to empower developers and creators alike. Overall, the project provides robust infrastructure for building and managing complex virtual environments.

Name: OpenBMB/RepoAgent
Description: RepoAgent is an LLM-powered tool designed to automate repository-level code documentation. It leverages abstract syntax tree analysis to generate detailed documentation for individual code objects in a repository. The framework supports multi-threading for efficient concurrent processing and integrates with GitHub Actions for streamlined automation. Additionally, RepoAgent automatically tracks changes in repositories and updates markdown documentation accordingly, making it a valuable tool for modern software development teams. Overall, it functions as an intelligent document assistant that reduces manual documentation effort and enhances codebase understanding.

Name: choosewhatulike/trainable-agents
Description: Character-LLM is a trainable agent framework focused on role-playing that simulates authentic character behaviors without the need for external prompts. It leverages a novel technique called Experience Reconstruction to generate detailed experience data, enabling characters such as Beethoven, Cleopatra, and others to respond in a naturally consistent manner. The repository provides not only the framework but also trained model weights and datasets, reflecting its strong research basis, as evidenced by its EMNLP 2023 paper. The implementation is in Python, and the system is designed to work as a conversational chatbot for role-playing scenarios. Overall, it serves as both a research and practical tool for developing dynamic, role-specific AI agents.

Name: AnotiaWang/deep-research-web-ui
Description: Deep Research Web UI is a browser-based application designed to facilitate deep research using AI. It integrates search engine capabilities, web scraping tools, and multiple AI models to provide real-time, secure, and multilingual research support. The UI offers features such as visualizing the research process as a tree structure, exporting reports as PDF, and providing safe local operations. Built with modern web technologies, it supports Docker deployment and continuous updates for improved performance and compatibility. Overall, it serves as an accessible tool for researchers who seek to combine traditional search methods with the power of large language models.

Name: HKUDS/AutoAgent
Description: AutoAgent is a fully-automated and zero-code LLM agent framework that empowers users to create, deploy, and manage multi-agent systems using natural language instructions. The project features a self-developing agent platform that supports natural language customization for building agents, tools, and workflows without the need for coding. It offers high performance with impressive benchmark rankings, including the GAIA Benchmark, and integrates with a wide range of LLMs. With an easy-to-use CLI interface and versatile agent editor and workflow editor modules, AutoAgent simplifies complex agent orchestration and interaction. The framework is both lightweight and extensible, setting a new standard for no-code AI assistant development.

Name: crestalnetwork/intentkit
Description: IntentKit is an autonomous agent framework that enables the creation and management of AI agents equipped with diverse skills such as blockchain integration and social media management. The project is designed with extensibility in mind, allowing custom skill and plugin integrations to enhance agent capabilities. Its modular structure includes components for agent configuration, memory, and external service interactions. Although currently in its alpha stage, IntentKit provides a foundational system for automating agent tasks and configurations. The framework encourages community contributions to iterate and expand its functionalities.

Name: SciSharp/BotSharp
Description: BotSharp is an open source AI agent framework built in .NET, designed to help developers connect large language models (LLMs) with business applications. The framework provides a modular, plugin-based architecture that decouples core functionalities from business logic, enabling flexible and scalable AI solutions. It incorporates features such as multi-agent conversation management, state tracking, and support for multiple AI platforms, including integration with various LLM providers. Additionally, BotSharp offers a rich UI and comprehensive toolkits for building, testing, and auditing AI agents, along with support for natural language understanding, computer vision, and audio processing. Its design targets enterprise developers looking for a robust and extensible system to integrate AI into information systems.

Name: BAAI-Agents/Cradle
Description: Cradle is an innovative Python framework that empowers AI agents with advanced reasoning abilities to perform general computer control tasks. It enables agents to execute complex operations using screenshots as input and simulated keyboard and mouse events as output. The framework supports a wide range of applications, including controlling video games like Red Dead Redemption 2 and Stardew Valley as well as various software applications. Its modular design and minimal requirements make it highly extensible for new environments, with comprehensive configurations and resources provided for each supported domain. Cradle also features detailed documentation and is backed by academic research, as evident from its arXiv paper.

Name: litanlitudan/skyagi
Description: SkyAGI is a Python package that simulates human-like behavior using generative agents, aiming to create immersive role-playing game experiences. The project implements ideas from recent research on generative agents to produce NPCs with believable human responses. It comes with examples featuring characters from popular series such as The Big Bang Theory and The Avengers, and also allows users to customize agents using JSON configuration files. The demonstration highlights the potential for rethinking game development, particularly in NPC scripting, by leveraging emerging capabilities in LLMs. Overall, the project serves as a cutting-edge tool for exploring AI-driven behavioral simulation in games.

Name: Canner/vulcan-sql
Description: VulcanSQL is a robust analytical data API framework that transforms SQL queries into RESTful APIs, enabling seamless data sharing for AI agents and data apps. It automates the creation of APIs from diverse data sources like databases, data warehouses, and data lakes, reducing manual coding and the risk of errors. The framework uses templated SQL along with a DuckDB caching layer to boost query performance and scalability. Its flexible deployment options, including Docker and command-line setups, coupled with standardized OpenAPI documents, simplify integration with existing systems. Overall, VulcanSQL provides an efficient and secure solution for rapid API development in data-centric environments.

Name: microsoft/WindowsAgentArena
Description: Windows Agent Arena (WAA) is a robust platform that provides a reproducible Windows OS environment for testing and benchmarking multi-modal AI agents in realistic scenarios. It leverages Docker and Azure ML cloud infrastructure to support scalable, parallel execution of AI tasks. The platform includes features such as configurable difficulty levels, comprehensive VM image preparation, and detailed benchmark reporting. With thorough documentation, scripts for local deployment, and integration of state-of-the-art tools like Omniparser, WAA is designed to facilitate advanced research and development of agentic AI systems.

Name: shroominic/codeinterpreter-api
Description: The project is an open source implementation of the ChatGPT Code Interpreter designed to execute Python code in a sandboxed environment using the CodeBox API. It leverages LangChain to manage conversation context and execute a variety of tasks such as dataset analysis, stock charting, and image manipulation. Users can run interactive sessions locally while relying on the OpenAI API for language model access. It is built with scalability in mind, allowing production deployments through integration with external APIs. The project provides both synchronous and asynchronous usage options, making it versatile for different development workflows.

Name: DSXiangLi/DecryptPrompt
Description: This repository aggregates a wealth of resources including research papers, open-source models, datasets, and frameworks focused on prompt engineering and large language models (LLMs). It provides curated lists and educational content that guide users through various strategies such as tuning methods, RLHF, and agent-based approaches. The resource compilation includes detailed links to academic articles, blog posts, and tutorials, particularly emphasizing LLM agents in the context of AIGC applications. It serves as a comprehensive reference for researchers, developers, and enthusiasts looking to explore and implement advanced AI techniques in prompt design and model alignment.

Name: THUDM/AgentBench
Description: AgentBench is the first benchmarking platform tailored to assess the performance of large language models functioning as autonomous agents. The project offers a comprehensive framework that supports a variety of tasks across environments such as operating systems, databases, knowledge graphs, digital card games, and lateral thinking puzzles. It leverages Docker and Python to simulate multi-turn interactions and realistic task environments, ensuring robust evaluation of LLM capabilities. The introduction of VisualAgentBench extends the benchmark to include visual foundation agents, highlighting the project's innovative approach. Extensive documentation and community collaboration further enhance its value for research and development in autonomous systems.

Name: quark-engine/quark-engine
Description: Quark Agent is an innovative AI-powered tool designed to analyze Android APKs for vulnerabilities using natural language. It dynamically generates Quark Script code based on user input, allowing for real-time adjustments and workflow refinements. The platform offers an intuitive drag-and-drop interface alongside text-based interaction, making detection workflows easy to create and modify. Built on Python and integrated with the OpenAI API, it supports seamless auto-suggestion and adaptive changes to detection rules. As an evolving project, Quark Agent continues to add new features that enhance its vulnerability analysis capabilities.

Name: Mirascope/mirascope
Description: Mirascope provides a unified interface for interacting with various LLM providers such as OpenAI, Anthropic, Mistral, and others, making it easier for developers to integrate advanced language models into their applications. The library streamlines tasks like text generation, structured information extraction, and the creation of complex AI-driven agent systems. It is designed with flexibility and user-friendliness in mind, offering a powerful yet straightforward interface for rapid development. Comprehensive tutorials and documentation further enhance its accessibility for both beginners and experienced developers.

Name: StreetLamb/tribe
Description: Tribe is a low-code tool that enables users to rapidly build and coordinate multi-agent teams through an intuitive drag-and-drop interface. The platform leverages the langgraph framework to facilitate both sequential and hierarchical workflow orchestration, allowing agents to specialize and collaborate on complex tasks. It supports persistent conversations, real-time monitoring, and tool calling, which together enhance the overall efficiency of solving problems. Tribe is designed for easy deployment using Docker, making it accessible for both local and remote server setups. Its approach to multi-agent coordination emphasizes flexibility and customization, ensuring that each agent can contribute effectively.

Name: robusta-dev/holmesgpt
Description: HolmesGPT is a robust, round-the-clock AI agent designed to help on-call engineers respond to alerts more efficiently. It automates the analysis of logs, traces, and metrics, and uses an agentic loop to determine whether issues are related to the application or infrastructure. The project integrates with multiple observability tools and external systems like Slack, PagerDuty, and Prometheus to provide comprehensive alert investigations. Available as a Python library, CLI tool, and through a browser interface via Robusta SaaS, HolmesGPT offers flexible deployment options. Its design emphasizes data privacy and read-only access to ensure safe operation in production environments.

Name: xingyaoww/code-act
Description: This repository is the official release for the CodeAct project, which introduces the concept of executable code actions to enhance the performance of LLM agents. The system integrates a Python interpreter to dynamically execute, revise, and emit code actions through multi-turn interactions. It provides detailed deployment instructions via Docker and Kubernetes, and even supports alternative setups using LLama.cpp for local inference. In addition, the project features a curated instruction-tuning dataset and benchmark evaluations that demonstrate its effectiveness over traditional text-based approaches. Overall, CodeAct serves both as a research contribution and a practical toolkit for building better LLM agents.

Name: showlab/Awesome-GUI-Agent
Description: This repository is a curated list that gathers papers, projects, and resources focused on multi-modal Graphical User Interface (GUI) agents. It is designed to support research and development in building digital assistants that interact with graphical user interfaces. The project actively welcomes contributions, inviting the community to suggest additional resources or missing papers. It also features an associated Awesome-Paper-Agent that automatically formats information from arXiv links. Overall, the repository serves as a valuable educational resource for those interested in GUI agent technologies.

Name: mayooear/ai-pdf-chatbot-langchain
Description: This project provides a chatbot that leverages GPT-4, LangChain, and LangGraph to interact with large PDF documents. It processes multiple PDFs by converting them into embeddings using Pinecone and enables users to query the documents via a chat interface. Built with Typescript and Next.js, it integrates several modern technologies including the OpenAI API for natural language processing. The repository includes detailed setup instructions, troubleshooting guidelines, and a tutorial video to aid in deployment. Overall, it is designed to serve as a scalable conversational AI solution for document exploration.

Name: frdel/agent-zero
Description: Agent Zero is a personal, organic agentic framework that evolves with its users, enabling dynamic task execution and multi-agent cooperation. It leverages a persistent memory system to recall past interactions and solve tasks more efficiently. The framework utilizes the operating system as a tool, allowing it to create and execute custom code and tools autonomously. With both a real-time terminal interface and a fully featured web UI, Agent Zero offers flexibility for a wide range of applications. Its fully customizable and transparent design empowers users to modify every aspect of its behavior, fostering an interactive and adaptive experience.

Name: HITsz-TMG/FilmAgent
Description: FilmAgent is a comprehensive multi-agent framework designed to automate film production in virtual 3D environments. It simulates key film crew roles such as directors, screenwriters, actors, and cinematographers while integrating various AI-driven workflows. The system provides a full pipeline from script generation to audio production and even integrates with Unity for simulation and visualization. Detailed instructions guide users in setting up environments, running scripts, and deploying voice and visual components. Overall, FilmAgent demonstrates an innovative approach to collaborative film automation.

Name: AIDC-AI/ComfyUI-Copilot
Description: ComfyUI-Copilot is an intelligent assistant built as a custom node for ComfyUI that enhances workflow automation and debugging processes through natural language interactions. It offers features such as an interactive Q&A bot, smart node suggestions, and workflow building aids to streamline AI model development. The project integrates multiple model supports and provides real-time assistance for troubleshooting and effective workflow management. With its user-friendly interface and automated parameter tuning, it simplifies complex tasks and accelerates the development cycle. Overall, it serves both beginners and experienced developers by making AI algorithm testing and deployment more accessible.

Name: HKUDS/Auto-Deep-Research
Description: Auto-Deep-Research is an open-source, fully-automated personal AI assistant built on the AutoAgent framework, serving as a cost-efficient alternative to OpenAI's Deep Research. The project seamlessly integrates with a wide range of LLMs such as OpenAI, Anthropic, and Huggingface, providing universal support for various language models. It features one-click launch, Docker containerization, and file upload capabilities, ensuring an out-of-the-box experience with zero configuration. Community-driven improvements and benchmark achievements further highlight its effectiveness and performance in automated research tasks.

Name: Jenqyang/Awesome-AI-Agents
Description: Awesome-AI-Agents is a curated repository that lists various projects and frameworks centered around autonomous agents powered by large language models. The collection includes agents for task solving, multi-agent collaborations, and even agent society simulations, offering a broad spectrum of applications. It serves as a comprehensive resource for researchers and developers to explore different autonomous agent systems from various domains. The repository categorizes projects ranging from conversational agents to advanced agent frameworks, making it a valuable starting point for those interested in AI agents.

Name: bowang-lab/MedRAX
Description: MedRAX is a comprehensive medical reasoning agent specifically designed for chest X-ray interpretation. It seamlessly integrates a suite of advanced tools including visual QA, segmentation, and report generation within a modular framework built on LangChain and LangGraph. Leveraging GPT-4o with vision capabilities along with multiple deep learning models, it offers enhanced support for clinical decision-making. The project features an intuitive Gradio interface for both local and cloud-based deployments and includes ChestAgentBench, a benchmark for evaluating complex medical queries. Overall, MedRAX represents a significant step towards automating and improving the accuracy of chest X-ray diagnostics.

Name: video-db/StreamRAG
Description: StreamRAG is a GPT-powered video retrieval and streaming agent designed to allow developers to create and manage searchable video collections effortlessly. The project leverages a Flask server setup in Python for handling video uploads and real-time search responses. It integrates with ChatGPT by enabling the publication of searchable collections on the ChatGPT store, offering retrieved text summaries and key insights extracted from videos. With a focus on retrieval augmented generation (RAG), StreamRAG provides a streamlined solution for video search and streaming, making multimedia content more accessible. Overall, it serves as an innovative bridge between video content and conversational AI interfaces.

Name: modal-labs/devlooper
Description: Devlooper is a program synthesis agent that autonomously fixes its output by running tests until all issues are resolved. It integrates with Modal's sandbox environment to execute and test code in isolated containers. The tool supports multiple environment templates such as Python, React with Jest, and Rust, enabling adaptable code generation across different programming languages. Its iterative debug loop leverages LLMs to analyze test failures and generate a DebugPlan to fix code and environment issues. Overall, the project serves as an automated synthesis and debugging framework aimed at improving developer workflows.

Name: pHaeusler/micro-agent
Description: The project is a minimalistic autonomous agent framework specifically designed in Python and powered by LLMs, notably OpenAI GPT-4. It serves as a research tool to experiment with autonomous agent development and explore AGI concepts. Using a state-machine design, the agent autonomously determines its next steps to write and test code based on a given purpose. The repository demonstrates its capabilities with a terminal-based game example while outlining potential future improvements. Overall, it offers a bare-bones, yet extensible, approach to AI-driven software engineering.

Name: towardsai/ragbook-notebooks
Description: This repository hosts a collection of Jupyter notebooks associated with the 'Building LLMs for Production' book by Towards AI. It covers a wide range of topics including transformer architectures, prompt engineering, and the development of LLM-powered agents. The notebooks provide practical examples and tutorials on building applications with tools such as LangChain and LlamaIndex. Chapters discuss advanced techniques like fine-tuning, reinforcement learning, and performance benchmarking. Overall, it serves as a comprehensive educational resource for practitioners looking to implement LLM and agent-based solutions in production.

Name: Upsonic/Tiger
Description: Tiger is a community-driven project that provides a reusable and integrated tool ecosystem for AI agents, enabling them to control computers through thought-like interactions. The project integrates with popular frameworks such as CrewAI, LangChain, and AutoGen, allowing agents to perform a wide range of actions from code execution to system control. It offers a customizable environment where agents can execute various tasks including browsing, calendar management, and document generation. Tiger leverages Upsonic for tool storage and profiling and supports a public dashboard for monitoring and documentation, fostering a collaborative community for AI innovation.

Name: mishushakov/dialogflow-web-v2
Description: The project is an unofficial web integration for Dialogflow V2, allowing developers to build conversational interfaces based on a powerful NLU engine. It leverages modern web technologies like Vue 3, Webpack, and Babel to deliver a high-performance, lightweight Progressive Web App with extensive browser support. The integration includes rich UI components, theming capabilities, and accessibility features, ensuring an excellent user experience. It also provides voice input and speech feedback, making it a versatile tool for both text and voice interactions. With Docker and Kubernetes support, the solution is suitable for both development and production environments.

Name: operand/agency
Description: Agency is a Python library that provides a minimal framework based on the actor model for building agent-integrated systems. It allows developers to define agents as classes with specific actions that can communicate with each other in a distributed manner using local and networked spaces. The library emphasizes scalability and performance, supporting both multiprocessing and multithreading, along with integration features such as AMQP for network communication. A demo application, complete with a Gradio UI, is provided to showcase various agent examples including those powered by AI. Overall, Agency serves as a flexible foundation for experimenting with and developing custom agent-based applications.

Name: test-zeus-ai/testzeus-hercules
Description: Hercules is designed to simplify and automate the testing of modern web applications, handling UI, API, Security, Accessibility, and Visual validations. It converts Gherkin test cases into fully automated tests while leveraging LLM models like gpt-4o for enhanced functionality. The tool integrates seamlessly into CI/CD pipelines and supports various browser interactions through Playwright. Hercules offers a no-code solution for test automation, making it accessible to users without programming skills. Detailed video tutorials, comprehensive documentation, and a user-friendly installation process further enhance its usability.

Name: Onelevenvy/flock
Description: Flock provides an extensible architecture to create sophisticated workflows using a variety of node types, including LLM nodes, retrieval nodes, code execution nodes, and human-in-the-loop nodes. The platform leverages technologies like LangChain, LangGraph, FastAPI, and NextJS to offer a flexible, low-code development experience. It enables rapid prototyping and deployment of chatbots and RAG applications while coordinating multi-agent collaborations. The system supports modular design with reusable subworkflows and integrates with various model providers and custom tools. Overall, Flock is designed to simplify the development of complex collaborative agent systems.

Name: niuzaisheng/ScreenAgent
Description: ScreenAgent is a computer control agent that leverages a visual language large model to interact with desktop user interfaces. The project provides an environment where a VLM Agent can observe screenshots and perform mouse and keyboard operations to complete multi-step tasks. It implements a planning-execution-reflection loop to guide the agent through task breakdown, execution, and subsequent refinement. The repository includes comprehensive components such as client code, a specialized dataset of computer tasks, and integration with VNC and clipboard services. The approach is demonstrated in a research context with an accompanying paper and practical tools for desktop automation.

Name: oneil512/INSIGHT
Description: INSIGHT is an autonomous AI framework designed for conducting medical research through a multi-agent system. The project features a boss agent that orchestrates tasks and worker agents that execute them, integrating results into a central llama index. It leverages external APIs such as PubMed and MyGene to retrieve critical biomedical data. Additionally, INSIGHT supports reloading of tasks and provides an interface to query the collected data, making it a robust tool for iterative research. Built in Python, it facilitates automation in managing and summarizing complex medical research workflows.

Name: jbexta/AgentPilot
Description: AgentPilot is a versatile workflow automation platform designed to create, organize, and execute complex AI-driven tasks. The platform supports both simple interactions with a single LLM and advanced multi-member workflows with branching chat capabilities. It offers a robust set of features including customizable UI, tool and module integration, scheduled task execution, and code interpretation in multiple languages. With support for plugin architecture and extensible components, AgentPilot caters to a wide range of automation needs and user interactions. Its intuitive interface and flexible configuration options make it a powerful tool for managing and automating AI workflows.

Name: WooooDyy/AgentGym
Description: AgentGym is an innovative framework designed to evolve large language model-based agents across a variety of interactive and diverse environments. It provides a unified platform that supports real-time, concurrent agent exploration through standardized interfaces and a modular architecture. The framework comes with comprehensive resources such as a trajectory dataset (AgentTraj), a benchmark suite (AgentEval), and a novel method called AgentEvol for agent self-evolution. Developed to facilitate the evaluation and advancement of generally-capable agents, AgentGym integrates research insights with practical implementations, as evidenced by its accompanying research paper.

Name: FudanSELab/Agent4SE-Paper-List
Description: The repository compiles a continuously updated list of scholarly papers on large language model-based agents and their applications in software engineering. It provides insights into how these agents enhance traditional software engineering tasks by integrating external resources and tools. The survey categorizes the literature from both software engineering and agent architecture perspectives, offering a dual lens on the field. This resource is particularly valuable for researchers and practitioners seeking to understand emerging trends at the intersection of AI agents and software engineering.

Name: overeasy-sh/overeasy
Description: Overeasy is a Python library that orchestrates zero-shot vision models to build custom computer vision pipelines. It enables users to chain specialized agents for tasks such as bounding box detection, classification, and upcoming segmentation. The framework leverages pre-trained models, eliminating the need for extensive data collection and annotation. It provides a structured workflow with visual execution graphs and integrates with tools like Gradio for interactive visualization. Overall, the project simplifies the creation of powerful vision solutions through a modular, agent-based approach.

Name: Grigorij-Dudnik/Clean-Coder-AI
Description: Clean Coder AI serves as both a virtual scrum master and a coding assistant, managing project tasks through Todoist and coding each task sequentially. Leveraging multiple intelligent AI agents, it autonomously plans projects, writes code, and performs testing to simplify the development process. The platform includes advanced features such as voice command interactions, frontend feedback, and file linting to ensure quality and ease of use. Additionally, its integration with Docker facilitates flexible deployment, making it a comprehensive automation tool for software development. Overall, it streamlines both project management and coding, reducing manual effort significantly.

Name: genia-dev/GeniA
Description: GeniA is an innovative AI assistant designed for engineering teams to streamline production workflows and automate tasks. Built with Python and leveraging OpenAI's function-calling capabilities, it integrates seamlessly into Slack and other tools for deployment and troubleshooting. The platform offers a production-grade containerized solution that is both extensible and quick to adapt to custom tools. With a lightweight design and focus on reducing boilerplate, GeniA empowers DevOps, SRE, and SecOps teams to work more efficiently. Its open-source nature ensures continuous improvement and community collaboration.

Name: stepanogil/autonomous-hr-chatbot
Description: This project is a prototype enterprise application that implements an autonomous HR chatbot designed to answer HR-related queries. It integrates ChatGPT with LangChain, leveraging tools like Pinecone for vector database functionality and Streamlit for the front-end interface. The agent can retrieve and process information from HR policies and employee data, allowing interactive and dynamic responses. It also includes components for generating embeddings and using additional tools like a calculator chain and Python AST tool, making it a comprehensive HR assistance solution. Overall, it demonstrates how autonomous agents can be deployed in a real-world enterprise setting to streamline HR operations.

Name: jlin816/dynalang
Description: Dynalang is a research codebase that implements an agent capable of leveraging language to predict and interact with a multimodal world model. The repository accompanies the ICML 2024 oral paper "Learning to Model the World with Language." It provides multiple example training scripts and environments including HomeGrid, Messenger, VLN, and LangRoom, demonstrating diverse applications from text pretraining to embodied task execution. The project integrates complex training pipelines and offers detailed instructions for setting up various experimental environments. Overall, it serves as both a research prototype and a tool for further exploration in learning-based agent modeling.

Name: Wilson-ZheLin/Streamline-Analyst
Description: Streamline Analyst is an innovative AI agent that leverages large language models to automate the entire data analysis process. It handles tasks ranging from data cleaning and preprocessing to feature engineering and model training. The application provides a user-friendly interface through a Streamlit-based web app, enabling users to easily upload data and visualize results. With advanced capabilities like automated model selection and evaluation metrics, it significantly reduces the time and effort required for comprehensive data analysis. Its design ensures data privacy while offering a seamless experience for both beginners and experts.

Name: tninja/aider.el
Description: aider.el is an Emacs plugin that integrates the Aider AI pair programming tool directly into the editor. It provides a user-friendly interface featuring a transient menu, helm support, and comint-based session management to interact with the AI. The plugin allows users to send code context and prompts to Aider, facilitating tasks such as code modification, unit test assistance, and TDD. Designed for everyday programming, the tool minimizes context switching by embedding AI interactions within the Emacs environment. Multiple installation options, including support for Straight, package-vc, and Doom Emacs, enhance its flexibility.

Name: yuruotong1/autoMate
Description: autoMate is an AI-powered local automation assistant that leverages natural language to control your computer and complete complex workflows. It is built on OmniParser and uses large language models to understand screen content and make autonomous decisions, effectively acting as your digital employee. The tool supports a no-code approach, allowing users to describe tasks in plain language without requiring programming skills. With a user-friendly web interface and streamlined installation process, autoMate focuses on data security by operating locally. Its innovative design aims to free users from repetitive tasks, enabling them to focus on higher-value work.

Name: Undertone0809/promptulate
Description: Promptulate is an AI agent application development framework designed with a Pythonic approach, enabling developers to quickly create LLM agent applications with minimal code. The framework provides a unified platform for integrating various components such as LLMs, agents, tools, and RAG, which simplifies the development process. With robust model compatibility and effortless integration of third-party tools like LangChain, it reduces the barrier to entry for building complex AI applications. Additionally, the framework offers a rich set of hooks, terminal debugging, and Streamlit component integration for rapid prototyping. Overall, Promptulate streamlines AI application development by encapsulating essential functionalities in a succinct and efficient manner.

Name: CraftJarvis/JARVIS-1
Description: JARVIS-1 is an innovative open-world multi-task agent designed for the Minecraft environment, integrating memory-augmented multimodal language models for sophisticated planning and control. The project utilizes visual and textual inputs to generate detailed plans which are executed by goal-conditioned controllers. With a robust multimodal memory system, the agent leverages both pre-trained models and in-game experiences to excel in a wide range of tasks from short-horizon actions to long-term objectives. The repository includes installation instructions, evaluation scripts, and links to a published paper, making it a rich resource for multi-agent research. Its design and experimental results highlight its potential as a benchmark in embodied AI research.

Name: kimtth/awesome-azure-openai-llm
Description: This repository curates a comprehensive collection of Azure OpenAI and Large Language Model resources, including references on RAG and agent frameworks. It organizes multiple topics into clear sections such as RAG, Azure OpenAI services, agent design patterns, Semantic Kernel, and LangChain comparisons. The entries are succinct, often accompanied by brief memos and dates reflecting the evolution of the field. It serves as a valuable reference point for professionals and enthusiasts interested in cloud-based AI and language model applications.

Name: xlang-ai/xlang-paper-reading
Description: The repository is a curated collection of research papers that focus on building and evaluating language model agents using executable language grounding techniques. It organizes papers into distinct groups covering topics such as LLM code generation, tool use, web grounding, and robotics, providing a broad overview of current research trends. The platform supports the exploration of methods that transform language instructions into executable actions in real-world environments. It highlights interdisciplinary approaches, integrating concepts from natural language processing, interactive systems, and robotics to create agent-based models. Overall, the project serves as an educational resource for researchers exploring the practical applications of language model agents.

Name: neural-maze/ai-companion
Description: This project, presented as an interactive course, guides users through building Ava, a WhatsApp agent inspired by sci-fi films and the Turing Test. It integrates multiple cutting-edge technologies including Llama, Whisper, and LangGraph to manage conversations, voice interactions, and image processing. The course is structured into several lessons that cover Ava's brain, memory system, voice, and vision pipelines, offering both written content and video tutorials. The tech stack is robust, utilizing cloud services such as Google Cloud Run and databases like Qdrant to enable sophisticated functionalities. Overall, the project delivers a practical and educational experience for creating advanced conversational agents.

Name: Alibaba-NLP/WebWalker
Description: WebWalker is a benchmark and framework designed to evaluate the performance of large language models in the context of web traversal tasks. It introduces the WebWalkerQA dataset comprising over 680 queries and more than 1373 webpages, providing a comprehensive evaluation platform. The project leverages a multi-agent framework for effective memory management and long context navigation, making it a valuable tool for testing complex web-navigation tasks. It offers online demos through Modelscope and Hugging Face, and includes detailed instructions for installation, evaluation, and running the system locally. Overall, it serves both as a benchmarking resource and a practical demonstration of advanced web traversal techniques.

Name: InternLM/Agent-FLAN
Description: Agent-FLAN is a project that introduces a novel approach for fine-tuning large language models to enhance their agent capabilities. The methodology focuses on redesigning the training corpus to separate agent reasoning from format following, addressing issues like hallucination in agent responses. The project is supported by a research paper, dataset releases, and model checkpoints, contributing to the advancement of agent performance in various tasks. The approach demonstrates significant improvements over previous methods in both held-in and held-out evaluations. Overall, it represents a valuable benchmark and educational resource for the development of effective AI agents.

Name: meshula/OpenSteer
Description: OpenSteer is a lightweight C++ library designed to help developers implement steering behaviors that simulate the movement of autonomous agents in games and animation. The library introduces a toolkit of behaviors based on an abstract mobile agent concept, often referred to as a 'vehicle', and includes sample code that demonstrates how to combine basic steering behaviors into more complex maneuvers. Accompanied by an OpenGL-based application called OpenSteerDemo, it allows for rapid prototyping, visualization, and debugging of these behaviors. Its plug-in architecture supports flexible integration with existing game engines, making it a practical resource for game AI programmers. The project also provides an interactive environment where users can adjust simulation parameters to better understand and refine autonomous behaviors.

Name: MLT-OSS/open-assistant-api
Description: The Open Assistant API is an open-source framework designed to simplify the creation and orchestration of AI intelligent assistants. It enables developers to integrate various large language models, retrieval-augmented generation (RAG) engines, and custom tools seamlessly. The framework supports local deployment using Docker Compose and is compatible with the official OpenAI Python client as well as the One API for multi-model management. With a focus on extending AI assistant capabilities, it provides robust support for message streaming, tool integration, and customizable orchestration. The project encourages community collaboration and leverages integrations with popular open-source projects to enhance its functionality.

Name: hsahovic/poke-env
Description: poke-env is a Python interface that allows developers to create and train reinforcement learning agents to engage in battles on Pokemon Showdown. It provides an easy-to-use API and well-documented examples to help users develop both rule-based and AI-driven battle strategies. The framework is designed to simulate competitive Pokemon battles and can be integrated with a local or public server for live testing. Designed with educational and research purposes in mind, poke-env offers an accessible entry point for experimenting with multi-agent reinforcement learning in a gaming environment. Its lightweight design makes it adaptable and suitable for academic as well as hobbyist projects.

Name: SwiftSage/SwiftSage
Description: SwiftSage is a generative agent system designed to perform complex interactive tasks by mimicking the dual process of fast intuitive and slow analytical thinking. The framework features multiple agents including a Swift Agent for quick reasoning, a Feedback Agent for critique, and a Sage Agent for more rigorous problem solving. It utilizes in-context reinforcement learning, where feedback from one agent guides another to improve its solutions iteratively. The system is built primarily in Python and leverages a plan-ground-execute paradigm to structure its reasoning workflow. Overall, SwiftSage presents a novel approach to using LLMs for multifaceted reasoning tasks.

Name: v2rockets/Loyal-Elephie
Description: Loyal Elephie is a robust, memory-enabled AI companion designed as a RAG chatbot optimized for local large language models. The project combines a sleek Next.js web interface with a Python backend to deliver a personalized conversational experience that saves and manages episodic memory. It offers features like controllable memory, hybrid search using ChromaDB and BM25, and secure access via a login system. The solution is compatible with both open and proprietary LLMs and integrates seamlessly with Markdown editors for real-time note editing. Deployable on Linux and configurable for local LLMs, it stands out as a versatile chatbot solution for multi-language support.

Name: david-abel/simple_rl
Description: simple_rl is a lightweight reinforcement learning framework that facilitates experimentation with various agents and MDP environments. The framework supports both Python 2 and Python 3 and integrates with OpenAI Gym environments. It includes basic test scripts and visualization tools to track experiment outcomes. The project emphasizes simplicity and reproducibility, featuring new functions to easily reproduce experiment results from saved files. It also provides a range of example implementations and guides to help users get started with reinforcement learning.

Name: Richasy/Rodel.Agent
Description: Rodel Agent combines a sleek, modern user interface with powerful backend integrations to support various online AI services. Built using .NET 8 and the Windows App SDK, it provides both chat and multimedia functionalities for a full desktop AI experience. The application includes separate modules for UI and console-based testing, making it versatile for development and demonstration purposes. Detailed documentation and configuration guidelines are provided to help users get started with leveraging its capabilities. Overall, Rodel Agent is an innovative solution for integrating multiple AI services within a seamless desktop environment.

Name: agents-flex/agents-flex
Description: Agents-Flex is a Java-based LLM application framework inspired by LangChain that provides comprehensive tools for building LLM-powered agents. It is designed to facilitate the development of LLM applications with built-in support for agents, chains, and function calling mechanisms. The framework enables integration with multiple LLM providers such as OpenAI, Qwen, and SparkAi, offering features like prompt templates, memory management, and vector stores. Detailed examples and tests illustrate its straightforward usage in developing conversational agents and managing workflow processes. Built for Java, Agents-Flex serves as a robust alternative to Python-based frameworks for LLM applications.

Name: ArcadeAI/arcade-ai
Description: Arcade-AI is a developer-focused Python SDK and CLI built to enhance agentic applications by offering streamlined tooling and simplified integration with external services. It allows developers to connect their agentic applications with various APIs and toolkits, reducing the complexity often associated with LLM-based solutions. The project includes a quickstart guide, easy-to-use CLI commands, and detailed documentation to help users get up and running quickly. Additionally, Arcade-AI is integrated with prebuilt toolkits for services like GitHub, Google, and Slack, demonstrating its flexibility and wide applicability in building robust agent-driven applications.

Name: NisaarAgharia/Advanced_RAG
Description: Advanced_RAG is a repository that provides a suite of Python notebooks demonstrating advanced Retrieval-Augmented Generation techniques using Langchain, OpenAI GPTs, META LLAMA3, and agentic flows. The project offers a step-by-step guided tour from basic to complex RAG processes including query transformations, indexing, and advanced retrieval methods. It emphasizes agentic features such as self-reflection, adaptive, and corrective flows which enhance the capability of large language models. The notebooks are enriched with visual diagrams and practical code examples that make the learning process interactive and insightful. This resource is ideal for developers and researchers interested in expanding their understanding of RAG systems in a Jupyter Notebook environment.

Name: zju-vipa/Odyssey
Description: Odyssey is a comprehensive framework that empowers Minecraft agents with advanced open-world skills and long-term planning capabilities. It integrates a skill library with 40 primitive and 183 compositional skills, enabling agents to perform diverse tasks in the Minecraft environment. The project leverages a fine-tuned LLaMA-3 model trained on an extensive dataset from the Minecraft Wiki, facilitating autonomous exploration and dynamic planning. With detailed benchmarks and extensive experimental validation, Odyssey serves as a bridge between gaming simulations and advanced multi-agent research.

Name: libraryofcelsus/Aetherius_AI_Assistant
Description: Aetherius is a locally-operated AI Assistant and multi-agent framework that leverages open source LLMs and a Qdrant vector database to enable private, modulated conversations. It integrates realistic long-term memory, reflective journaling, and the ability to spawn sub-agents for specialized tasks. The project is actively being refactored into modular components, making it easier to enhance individual features and improve overall usability. With support for various interfaces including a Discord bot, TTS, and GPT-4 Vision, Aetherius provides a comprehensive suite for managing digital cognition and content generation. It emphasizes user control and privacy, offering an alternative to managed centralized AI systems.

Name: Aident-AI/open-cuak
Description: Open-CUAK (Computer Use Agent Kit) is a free and open-source platform designed for teaching, hiring, and managing automation agents at scale. It allows businesses to deploy and manage thousands of agents reliably, starting with browser-based automation workflows. The platform leverages vision-based techniques and remote browser technology to mimic human interactions, ensuring efficient task execution. Developed by the Aident AI team, Open-CUAK serves as an alternative to commercial operator solutions, emphasizing scalability and productivity. With comprehensive demos and documentation, users can quickly adopt the system for real-world automation needs.

Name: drivecore/mycoder
Description: MyCoder is a command-line based AI agent system designed to assist with coding tasks by leveraging powerful AI models like Anthropic's Claude and OpenAI. It offers a modular and extensible tool architecture that enables the spawning of sub-agents for parallel task execution. The system is self-modifying, meaning it can adjust its own code based on runtime needs, and it comes with a sophisticated logging system to facilitate debugging. Built as a mono-repository with clear GitHub and CLI integration, MyCoder provides an innovative approach to automating and optimizing software development workflows.

Name: craftgen/craftgen
Description: Craftgen is an open-source AI platform designed to integrate AI into every workflow using a no-code interface and an intuitive visual canvas. The platform leverages the actor model and graph-based architecture to build dynamic, customizable AI workflows that cater to both technical and non-technical users. It offers comprehensive model support with integrations to various LLMs and enables the creation of AI agents with customizable capabilities. With features like real-time monitoring, event-driven data processing, and secure offline functionalities, Craftgen facilitates rapid prototyping to production deployments. Overall, the platform bridges advanced AI technology with practical usability and integration across diverse APIs.

Name: ldclabs/anda
Description: Anda is an AI agent framework built in Rust that integrates with the ICP blockchain and utilizes Trusted Execution Environments (TEEs) to ensure security and reliability. The framework is designed to enable the creation of a highly composable and autonomous network of AI agents capable of solving specialized tasks. Its modular architecture supports collaboration among agents when tackling complex problems, thereby enhancing overall system adaptability. With features such as perpetual memory and decentralized trust mechanisms, Anda aims to advance the development of super AGI systems across industries. The project is open for both developers and non-developers, encouraging contributions in agent creation, integration tools, and core engine enhancements.

Name: askui/vision-agent
Description: AskUI Vision Agent is a Python library that automates native device interactions across various operating systems. It supports Windows, Linux, MacOS, Android, and iOS, enabling secure automation of computer tasks through AI-driven commands. The tool leverages multiple AI model providers to perform UI automation tasks such as clicking, typing, and screen reading, and supports both single-step and intent-based multi-step commands. With flexible model switching and on-premise capabilities for reteaching models, it is designed for enterprise-grade automation. This project facilitates efficient and secure automation of routine computer interactions.

Name: anchen1011/FireAct
Description: FireAct is a Python-based project focused on fine-tuning language agents using a comprehensive suite of tools, data generation scripts, and prompts. It provides demo code and fine-tuning datasets to facilitate training and experimenting with language models, particularly within the Llama family. The repository is built around a research publication that details the methodology and experiments for language agent fine-tuning. With detailed instructions for setup, data generation, and both supervised and inference tasks, FireAct serves as a valuable resource for researchers and developers working on language agents.

Name: meysamhadeli/codai
Description: Codai is an AI-powered code assistant that operates via a session-based CLI to streamline coding tasks. It leverages advanced techniques like Retrieval-Augmented Generation (RAG) and Tree-sitter to analyze and summarize the full context of a project’s codebase. By integrating with various LLM providers such as OpenAI, DeepSeek, Azure OpenAI, Ollama, Anthropic, and OpenRouter, it delivers intelligent code suggestions, refactoring, and detailed reviews. The tool is designed to reduce token usage while providing contextually relevant insights, thus improving developer productivity. Built with modern Go practices, Codai offers a configurable and efficient solution for managing and enhancing code quality.

Name: HKUDS/GraphAgent
Description: GraphAgent is an innovative agentic graph language assistant that integrates graph-based reasoning with automated task orchestration. The project features three distinct components: a Graph Generator Agent to construct knowledge graphs, a Task Planning Agent to interpret user queries, and a Task Execution Agent to carry out the planned tasks. It supports both predictive tasks, such as node classification, and generative tasks including text generation, effectively bridging the gap between structured graph data and unstructured information. Extensive experiments and benchmarks are provided, demonstrating its efficiency on diverse datasets. Additionally, the repository offers inference code, pre-trained models, and comprehensive documentation for further exploration.

Name: JosefAlbers/Phi-3-Vision-MLX
Description: Phi-3-Vision-MLX is a versatile AI framework that integrates advanced vision and language models optimized for Apple Silicon. It leverages the Phi-3.5-Vision multimodal model alongside the Phi-3.5-Mini language model to perform tasks such as visual question answering and code execution. The framework provides a flexible agent system, enabling multi-turn conversations and custom toolchain setups. It also supports advanced features like model quantization, LoRA fine-tuning, and external API integration. Overall, the project offers a comprehensive suite for multimodal AI applications tailored for modern hardware.

Name: dendrite-systems/dendrite-python-sdk
Description: Dendrite Python SDK is an open source framework designed for building web AI agents that can authenticate, interact with, and extract data from websites. The project provides a range of functions such as navigating web pages, interacting with elements, filling forms, clicking buttons, and even handling file downloads for data extraction. Although the SDK is not under active development, it remains a valuable resource for developers looking to study or adapt web automation techniques for AI agents. Detailed examples and documentation illustrate various use cases, from sending emails to scraping company data, making it both an educational and practical tool. The project encourages collaboration and learning through its open approach and community engagement via Discord.

Name: USC-GVL/Agent-Driver
Description: Agent-Driver is an innovative framework that leverages large language models as cognitive agents to enhance autonomous driving systems. The project introduces a paradigm shift by integrating human-like reasoning capabilities, including chain-of-thought and task planning, into the traditional driving pipeline. It incorporates a versatile tool library, cognitive memory, and a GPT-based motion planner fine-tuned via the OpenAI API. Extensive experiments on the nuScenes benchmark demonstrate its superior performance and interpretability over state-of-the-art methods. This work is well-documented and accompanied by a preprint, installation instructions, and evaluation protocols, positioning it at the intersection of AI and autonomous systems.

Name: lgrammel/js-agent
Description: JS Agent is a composable and extensible framework for building AI agents using JavaScript and TypeScript. It provides a robust set of building blocks for designing, running, and monitoring agent executions, including features like cost tracking and HTTP integrations. The project offers detailed documentation and a variety of examples, such as a Wikipedia question-answering agent and a BabyAGI implementation, which illustrate its capabilities for handling diverse tasks. Although it is not actively maintained anymore, it has paved the way for more advanced libraries like ModelFusion. Overall, it serves as a practical resource for experimenting with AI agent design and execution in a JavaScript environment.

Name: TheAgentCompany/TheAgentCompany
Description: TheAgentCompany is an extensible benchmark framework designed to evaluate the performance of large language model (LLM) agents on real-world professional tasks. It simulates a software company environment where agents take on roles such as software engineer, product manager, and data scientist, providing a realistic testbed for digital worker capabilities. The project leverages Docker containers to encapsulate tasks and includes comprehensive evaluation methodologies and grading mechanisms. It enables users to assess agents based on multiple criteria including task completion, scoring systems, and performance metrics. Overall, it is a valuable resource for both academic research and industrial applications that seek to understand and enhance AI agent performance.

Name: index-labs/evalgpt
Description: EvalGPT is an innovative code interpreter framework designed to break down user-defined tasks into manageable sub-tasks executed by EvalAgent nodes. The framework leverages advanced large language models such as GPT-4, CodeLlama, and Claude 2 for planning and code generation. With a master node coordinating planning, scheduling, and memory management, EvalGPT efficiently optimizes code execution and error handling. It seamlessly integrates with the system's Python interpreter and external tools, ensuring robust performance and scalability. Although the project is in early development, its architecture, inspired by systems like Google's Borg, demonstrates significant potential for automated code-writing and execution.

Name: ServiceNow/AgentLab
Description: AgentLab is an open-source framework designed for developing, testing, and benchmarking scalable web agents on a variety of tasks. Built primarily in Python, it leverages modern tools like Ray for large-scale parallel experiments. The framework provides a unified API for various language models and integrates with BrowserGym for reproducing and analyzing benchmark results. It includes an interactive UI assistant, detailed leaderboards, and comprehensive setup instructions to facilitate reproducible web agent research. Overall, AgentLab accelerates the exploration and evaluation of web agents in a robust and extensible environment.

Name: zorazrw/agent-workflow-memory
Description: Agent Workflow Memory leverages a specialized agent memory to induce, integrate, and utilize workflows for solving tasks in various web environments. It demonstrates state-of-the-art performance on WebArena and robust generalization on Mind2Web, making it a unique approach in agent-based automation. The project supports both offline learning with annotated examples and online adaptation from past experiences. Detailed instructions and evaluations are provided alongside a citation for further academic insight. Overall, AWM offers an innovative method for optimizing agent workflows in a modular and efficient way.

Name: mingze-yuan/Awesome-LLM-Healthcare
Description: This repository maintains an exhaustive list of papers focusing on large language models in medicine, exploring their roles in diagnostic processes, clinical operations, and healthcare decision-making. It discusses the integration challenges faced when deploying LLMs in complex medical environments. The collection notably emphasizes research on multimodal models and autonomous healthcare agents, underlining their potential in personalized care. Serving as both an educational reference and a curated anthology, the repository is invaluable for researchers and practitioners interested in LLM-powered healthcare innovations.

Name: iMeanAI/WebCanvas
Description: WebCanvas is an open-source web agent framework that enables rapid prototyping and evaluation of AI agents in dynamic, real-world web environments. It provides a suite of toolkits and modular components for planning, observation, memory, reward, and evaluation, facilitating the creation of complex web tasks with minimal setup. The framework integrates seamlessly with live browser environments through a JavaScript event listener system and supports key-node based evaluation for granular performance analysis. Additionally, it offers open data access, a comprehensive benchmark dataset, and integration with multiple model services for extensive testing and real-time assessment. With frequent updates and active community engagement, WebCanvas pushes the boundaries of online AI agent development.

Name: tomasonjo/llm-movieagent
Description: Tomasonjo/llm-movieagent is a project that implements an intelligent agent to interact with a Neo4j graph database through a semantic layer powered by OpenAI function calling. The agent can retrieve movie information, provide recommendations, and store user preferences using specialized tools. The project leverages Docker for containerization and includes a simple Streamlit-based chat interface for ease of use. Additionally, an ingestion script is provided to populate the database with a movie dataset based on MovieLens, making the setup comprehensive and user-friendly.

Name: l3vels/L3AGI
Description: L3AGI is an open-source framework designed to enable AI agents to collaborate as effectively as human teams. It facilitates the creation, supervision, and execution of both autonomous AI Assistants and teams of assistants working together on complex tasks. The platform integrates various toolkits, data sources, and APIs, providing a seamless experience for managing AI collaborations. With a user-friendly interface and robust backend services, L3AGI supports efficient data processing and modular development. The project emphasizes community engagement to continuously enhance the capabilities of AI agents.

Name: SeriousOldMan/Simulator-Controller
Description: Simulator Controller is a modular and extendable administration and controller application designed for sim racing that leverages sophisticated AI assistants. It integrates various external controller hardware and plugins to interface with common simulation components like SimHub and SimFeedback. The project features multiple voice-enabled AI agents, including an AI Race Engineer, Race Strategist, Race Spotter, and Driving Coach, which offer real-time assistance and strategic insights during races. Its comprehensive automation framework streamlines pit stop preparation, telemetry management, and race strategy formulation. By combining cutting-edge GPT technology with robust automation, Simulator Controller enhances the realism and enjoyment of sim racing.

Name: fetchai/agents-aea
Description: The fetchai/agents-aea repository offers a comprehensive framework for developing Autonomous Economic Agents (AEAs) designed to autonomously create economic value. Built in Python, it provides the tools necessary to build agents that represent individuals, families, organizations, or objects in the digital realm. The framework emphasizes autonomous decision-making with minimal owner interference, facilitating robust economic interactions. It is supported by extensive documentation, testing, and community contributions, making it ideal for both research and practical multi-agent projects. Overall, the project serves as a foundational tool for exploring agent-based economic models.

Name: OS-Agent-Survey/OS-Agent-Survey
Description: This repository hosts a comprehensive survey paper on OS Agents, focusing on (M)LLM-based agents designed for computers, phones, and browsers. The paper provides an in-depth review of the state-of-the-art in OS Agents, covering various aspects such as foundation models, agent frameworks, evaluation benchmarks, and safety/privacy concerns. It compiles a curated list of relevant research papers and offers insights into the evolving landscape of these agents. The survey is intended to serve both academic researchers and industry practitioners by consolidating key developments and trends in OS agent research.

Name: PeterGriffinJin/Graph-CoT
Description: Graph Chain-of-Thought is a framework that augments large language models with graph-based reasoning to improve the retrieval of external, interconnected knowledge. It provides both the source code and a comprehensive benchmark dataset (GRBench) for evaluating and developing models aimed at mitigating LLM hallucinations. The repository describes a multi-step iterative process, where an LLM reasons, interacts, and executes queries on a graph to extract necessary information. Accepted at ACL 2024, this project demonstrates the potential of integrating structured graph data into chain-of-thought reasoning. Its design even hints at treating LLMs as agents operating within a graph environment.

Name: nottelabs/notte
Description: Notte is a web browser built for integrating large language model (LLM) agents, enabling them to navigate the web with structured actions without traditional HTML parsing. The project transforms webpages into navigable maps described in natural language, minimizing hallucinations and reducing token usage. It leverages reinforcement learning style controls and supports multi-step interactions through a reinforcement learning environment. Notte is extensible and integrates with multiple LLM providers, offering advanced features like API-based browser sessions and a dedicated SDK for programmatic control. Overall, it provides a robust environment for developing conversational and autonomous agents that require web interaction.

Name: zjunlp/AutoAct
Description: AutoAct is an automatic agent learning framework that leverages self-planning to build QA systems from scratch without large-scale annotated data. The system automatically synthesizes planning trajectories and differentiates a meta-agent into specialized sub-agents, including planning, tool selection, and reflection components. It integrates techniques from prominent projects such as FastChat, ReAct, and LangChain, and relies on self-instruct processes to generate task-specific data. Extensive experiments demonstrate AutoAct’s competitive performance against strong baselines in complex question-answering tasks.

Name: npi-ai/npi
Description: NPi is an open-source platform that provides Tool-use APIs specifically designed for AI agents to perform actions in virtual environments. It allows developers to integrate various software tools and applications into their AI systems effectively. The project offers a simple command line interface for trying out its features and includes clear documentation alongside examples of how to get started. Currently, it is in active development, which may result in API changes in future releases. NPi aims to empower developers with a platform to enhance their AI agents' capabilities.

Name: zjunlp/KnowAgent
Description: KnowAgent is a knowledge-augmented planning system designed for large language model (LLM)-based agents, emphasizing iterative self-learning and trajectory generation for improved planning capabilities. The project creates a comprehensive action knowledge base that informs the action generation process, enhancing LLM agents' planning in complex scenarios. It employs scripts for path generation and utilizes knowledge-based learning methods to refine agents continuously. This project merges cutting-edge technologies and methodologies, contributing significantly to autonomous agent development.

Name: shure-dev/Awesome-LLM-Papers-Comprehensive-Topics
Description: This project compiles a comprehensive list of academic papers and repositories related to Large Language Models (LLMs), covering a wide array of topics from reinforcement learning to prompt engineering. It offers 516 resources that are beneficial for anyone interested in the latest advancements and methodologies in the field of AI. The curated list serves both as a reference for research and a repository for practical implementations. Users are encouraged to explore the accompanying Notion table for a more interactive experience.

Name: harveybc/gym-fx
Description: gym-fx is a forex trading simulator environment designed for OpenAI Gym. It allows users to test the performance of custom trading agents in a forex market. The environment features configurable parameters including dynamic spreads and multiple observation types derived from CSV history. Users can utilize both discrete and continuous action spaces to optimize trading strategies. This project serves as a useful tool for those interested in algorithmic trading and performance evaluation of trading agents.

Name: rusiaaman/wcgw
Description: The WCGW project is a coding agent designed for use with the Claude and ChatGPT applications, allowing autonomous interaction with shell commands on local machines. It empowers users to create, execute, and iterate code while providing features like syntax checking, interactive command handling, and task checkpointing for improved workflows. Built primarily for mac and linux environments, it optimizes command execution to prevent accidental data loss and facilitates better context retention during sessions. Overall, WCGW enhances productivity for developers by enabling chat-based coding capabilities and seamless integration with existing workflows.

Name: langflow-ai/langflow
Description: Langflow is a low-code application builder designed for retrieval-augmented generation (RAG) and multi-agent AI applications, making it accessible for those without extensive coding experience. It supports a visual IDE for workflow design and testing, allowing easy drag-and-drop operations. This Python-based tool is agnostic to models, APIs, and databases and can publish as an API or export as a Python application. The platform enhances multi-agent orchestration and offers observability with integrations, ensuring both security and performance for enterprise needs.

Name: dagger/dagger
Description: Dagger is an open-source runtime designed for composable workflows, emphasizing repeatability, modularity, observability, and cross-platform support. It is particularly well-suited for AI agents and CI/CD workflows, providing a reproducible execution engine powered by a declarative DAG scheduler. The platform supports a universal type system and includes native SDKs for various programming languages, enabling seamless integration across multiple environments. With features like deep tracing and metrics, it also offers an interactive command-line interface for rapid prototyping and debugging.

Name: firebase/genkit
Description: Genkit is an open source framework designed for building AI-powered applications using familiar code-centric patterns and offering support for both Node.js and Go. The framework facilitates rapid development, integration, and testing of intelligent agents, with features such as observability and enhanced prompt engineering. It provides a unified generation API, seamless plugin ecosystem, and tools like a CLI and a developer UI to streamline debugging and evaluation. Genkit also supports diverse use cases including chatbot development, data transformation, and retrieval-augmented generation. Its versatile design makes it a powerful toolkit for developers looking to incorporate generative AI capabilities into their applications.

Name: cloudflare/agents
Description: Cloudflare Agents is an innovative framework designed for building and deploying intelligent, stateful AI agents at the edge of the network. The project leverages real-time communication, persistent state management, and integrates with tools like WebSockets and React to facilitate seamless agent operations. It is built primarily with JavaScript and TypeScript, offering a robust foundation for developing autonomous agents that can process interactions and learn from them. The framework is in active development, with ongoing enhancements such as advanced memory systems and improved observability features. Community contributions are encouraged to help shape the evolving landscape of AI agent technology.

Name: evilsocket/nerve
Description: Nerve is a framework that enables users to create and deploy LLM agents using a straightforward YAML-based syntax. The project leverages simple configuration files, known as tasklets, to define agents capable of autonomous problem solving and multi-agent workflows. It comes with a standard library of actions which empowers agents to identify goals, plan solutions, and recall pertinent information. By providing a compatibility layer for function calling, Nerve works seamlessly with any LLM while requiring zero coding effort. Overall, it offers a minimalistic and flexible approach to building smart automated agents.

Name: octotools/octotools
Description: OctoTools is an open-source, training-free agentic framework designed for complex reasoning tasks in diverse domains. It integrates extensible tool cards that encapsulate various functionalities without requiring additional training. The framework includes a planner for both high-level and low-level planning, and an executor to carry out commands and aggregate results. Through a modular design, OctoTools allows seamless integration and customization of new tools, and its performance is validated across multiple benchmarks. It provides detailed visualizations and in-depth analysis of tool usage, showcasing its competitive edge over similar frameworks.

Name: ai-christianson/RA.Aid
Description: RA.Aid is an autonomous software development tool that employs AI agents to research, plan, and implement multi-step coding tasks. Built on LangGraph's agent-based task execution framework, it provides intelligent assistance in managing complex programming workflows. The tool integrates with various AI models and services, such as those from OpenAI and Anthropic, to enhance code editing, debugging, and refactoring capabilities. With features like automated command execution, Git integration, and a modular design, RA.Aid streamlines software development while promoting a near-fully-autonomous approach. Its interactive CLI and optional human-in-the-loop mode further enhance the development experience.

Name: The-Pocket/PocketFlow
Description: PocketFlow is a minimalist 100-line Python LLM framework designed to enable LLM agents to program applications autonomously. It supports various design patterns including multi-agent systems, workflows, and retrieval-augmented generation (RAG), offering a modular and expressive abstraction for developers. The framework emphasizes a lightweight core with a simple computation graph and a shared store to decouple data from compute logic. With comprehensive documentation and examples, PocketFlow encourages users to build LLM apps by simply describing requirements rather than traditional coding. Its clear design aims to make LLM-based automation accessible and efficient for modern development paradigms.

Name: microsoft/Trace
Description: Microsoft Trace is a PyTorch-like library designed for training AI systems in an end-to-end manner using general feedback such as rewards, losses, or natural language. It introduces key primitives like 'node' and 'bundle' to build and optimize computation graphs that generalize traditional back-propagation. The library supports diverse optimization tasks and integrates with backends like LiteLLM and AutoGen, making it versatile for advanced AI optimization. Detailed documentation, scholarly papers, and practical examples—including a conversational sales agent—demonstrate its applied potential in AI agent design and training. Overall, Trace provides a novel approach to generative optimization, enabling more adaptable and self-optimizing AI systems.

Name: goat-sdk/goat
Description: GOAT (Great Onchain Agent Toolkit) is an open-source framework that enables AI agents to interact with blockchain-based applications. It provides a comprehensive library of over 200 onchain tools, allowing agents to manage wallets, perform token transactions, and execute DeFi operations. The framework supports integration with various agent frameworks and offers quickstart examples in both Typescript and Python. Designed to be lightweight and extendable, GOAT allows developers to install only the necessary plugins and tools, ensuring minimal bloat. Its modular architecture fosters customization and efficient connection between AI agents and decentralized apps.

Name: neurocult/agency
Description: Agency is a Go-native library that enables developers to harness the potential of generative AI and build autonomous agents using a clean, idiomatic approach. The project offers a simple API for integrating large language models such as OpenAI's GPT, facilitating functionalities like text-to-text and even text-to-speech operations. It emphasizes lightweight design and clean architecture, allowing easy composition of operations and custom implementations through simple interfaces. Built entirely in Go, Agency fills a gap in the ecosystem by providing a robust alternative to more cumbersome, non-Go solutions. The repository also includes tutorials and examples to help users get started with building autonomous and responsive agents.

Name: rivet-gg/actor-core
Description: ActorCore is a stateful, serverless framework that enables the development of AI agents, realtime applications, and multiplayer game servers. Built to run on multiple platforms such as Rivet, Cloudflare Workers, Bun, and Node.js, it provides built-in features like persistent in-memory state, RPC, events, and scheduling. The framework simplifies backend development by eliminating extra boilerplate code, while offering ultra-fast state updates and scaling capabilities. Its architecture is designed for high performance in real-time environments, making it ideal for projects ranging from chat applications to complex game server simulations. With extensive integration options, ActorCore stands out as a versatile tool for modern backend development.

Name: Stephen-SMJ/LAMBDA
Description: 

Name: eidolon-ai/eidolon
Description: 

Name: kyegomez/awesome-multi-agent-papers
Description: 

Name: idosal/AgentLLM
Description: 

Name: SamurAIGPT/Best-AI-Agents
Description: 

Name: bosun-ai/swiftide
Description: 

Name: BandarLabs/clickclickclick
Description: 

Name: cloudflare/agents-starter
Description: 

Name: superagent-ai/super-rag
Description: 

Name: elizaOS/characterfile
Description: 

Name: inferablehq/inferable
Description: 

Name: alexfazio/crewAI-quickstart
Description: 

Name: quantalogic/quantalogic
Description: 

Name: lion-agi/lionagi
Description: 

Name: trustgraph-ai/trustgraph
Description: 

Name: Azure-Samples/contoso-creative-writer
Description: 

Name: aiplanethub/openagi
Description: 

Name: GigaxGames/gigax
Description: 

Name: web-arena-x/visualwebarena
Description: 

Name: cagostino/npcsh
Description: 

Name: airweave-ai/airweave
Description: 

Name: blob42/Instrukt
Description: 

Name: joshpocock/Stride-AI-Agents
Description: 

Name: daveebbelaar/ai-cookbook
Description: 

Name: decodingml/second-brain-ai-assistant-course
Description: 

Name: Olney1/ChatGPT-OpenAI-Smart-Speaker
Description: 

Name: callstackincubator/fabrice-ai
Description: 

Name: wjayesh/mahilo
Description: 

Name: daydreamsai/daydreams
Description: 

Name: bsorrentino/langgraph4j
Description: 

Name: statelyai/agent
Description: 

Name: CNTRLAI/Notate
Description: 

Name: dreadnode/rigging
Description: 

Name: qrev-ai/qrev
Description: 

Name: C0deMunk33/bespoke_automata
Description: 

Name: anuj0456/pilottai
Description: 

Name: theyashwanthsai/Devyan
Description: 

Name: ServiceNow/TapeAgents
Description: 

Name: MODSetter/gpt-instagram
Description: 

Name: shobrook/saplings
Description: 

Name: jadvrodrigues/CustomNavMesh
Description: 

Name: bolna-ai/bolna
Description: 

Name: callstackincubator/flows-ai
Description: 

Name: normal-computing/fuji-web
Description: 

Name: duaraghav8/dockershrink
Description: 

Name: vintasoftware/django-ai-assistant
Description: 

Name: lecca-digital/lecca-io
Description: 

Name: JetXu-LLM/llama-github
Description: 

Name: swarmzero/swarmzero
Description: 

Name: Mintplex-Labs/openai-assistant-swarm
Description: 

Name: agentlabs-dev/agentlabs
Description: 

Name: ashishpatel26/500-AI-Agents-Projects
Description: 

Name: turing-machines/mentals-ai
Description: 

Name: sigoden/llm-functions
Description: 

Name: Tiledesk/tiledesk-server
Description: 

Name: jaemil/agentsflow
Description: 

Name: e2b-dev/infra
Description: 

Name: vdutts7/gpt4V-scraper
Description: 

Name: Tiledesk/tiledesk-dashboard
Description: 

Name: Protofy-xyz/Protofy
Description: 

Name: steel-dev/surf.new
Description: 

Name: phodal/shire
Description: 

Name: anarchy-ai/LLM-VM
Description: 

Name: AgentEra/Agently-Daily-News-Collector
Description: 

Name: asinghcsu/AgenticRAG-Survey
Description: 

Name: yifanlu0227/ChatSim
Description: 

Name: palico-ai/palico-ai
Description: 

Name: vespperhq/vespper
Description: 

Name: nekomeowww/insights-bot
Description: 

Name: gersteinlab/MedAgents
Description: 

Name: cohere-ai/cohere-terrarium
Description: 

Name: expectedparrot/edsl
Description: 

Name: TIGER-AI-Lab/TheoremExplainAgent
Description: 

Name: stripe/agent-toolkit
Description: 

Name: InternLM/agentlego
Description: 

Name: Alibaba-NLP/CHRONOS
Description: 

