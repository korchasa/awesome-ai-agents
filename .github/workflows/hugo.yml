name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      site_title:
        description: 'Site title'
        required: false
        default: 'Awesome AI Agents'
        type: string
      site_description:
        description: 'Site description'
        required: false
        default: 'A curated list of awesome AI agents and tools'
        type: string
      hugo_version:
        description: 'Hugo version'
        required: false
        default: '0.145.0'
        type: string
      use_extended:
        description: 'Use Hugo extended version'
        required: false
        default: true
        type: boolean
      template_path:
        description: 'Path to Hugo templates'
        required: false
        default: '.github/hugo-templates'
        type: string

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      # Use inputs from workflow_dispatch or default values
      HUGO_VERSION: ${{ github.event.inputs.hugo_version || '0.145.0' }}
      HUGO_CACHEDIR: /tmp/hugo_cache
      SITE_TITLE: ${{ github.event.inputs.site_title || 'Awesome AI Agents' }}
      SITE_DESCRIPTION: ${{ github.event.inputs.site_description || 'A curated list of awesome AI agents and tools' }}
      TEMPLATE_PATH: ${{ github.event.inputs.template_path || '.github/hugo-templates' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: ${{ github.event.inputs.use_extended || true }}

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      # Опционально: кэширование Hugo Modules, если вы их используете
      - uses: actions/cache@v4
        with:
          path: ${{ env.HUGO_CACHEDIR }}
          key: ${{ runner.os }}-hugomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-hugomod-

      # Проверяем существование директории с шаблонами
      - name: Check template directory
        id: check_templates
        run: |
          if [ -d "${{ env.TEMPLATE_PATH }}" ]; then
            echo "templates_exist=true" >> $GITHUB_OUTPUT
          else
            echo "templates_exist=false" >> $GITHUB_OUTPUT
            echo "::warning::Template directory ${{ env.TEMPLATE_PATH }} not found. Using default Hugo templates."
          fi

      # Копируем шаблоны из указанной директории в корневую директорию Hugo
      - name: Prepare Hugo site
        run: |
          # Создаем структуру директорий Hugo
          mkdir -p layouts/_default layouts/partials layouts/_markup static/css content

          # Копируем шаблоны, если они существуют
          if [ "${{ steps.check_templates.outputs.templates_exist }}" = "true" ]; then
            if [ -d "${{ env.TEMPLATE_PATH }}/layouts" ]; then
              cp -r ${{ env.TEMPLATE_PATH }}/layouts/* layouts/
            fi

            if [ -d "${{ env.TEMPLATE_PATH }}/css" ]; then
              cp -r ${{ env.TEMPLATE_PATH }}/css/* static/css/
            fi
          else
            # Создаем базовые шаблоны, если директория с шаблонами не найдена
            echo '<!DOCTYPE html><html><head><title>{{ .Site.Title }}</title></head><body>{{ .Content }}</body></html>' > layouts/_default/baseof.html
            echo '{{ define "main" }}<h1>{{ .Title }}</h1>{{ .Content }}{{ end }}' > layouts/_default/single.html
            echo '{{ define "main" }}<h1>{{ .Title }}</h1>{{ .Content }}{{ end }}' > layouts/_default/home.html
          fi

          # Создаем config.toml
          cat > config.toml << EOF
          baseURL = "${{ steps.pages.outputs.base_url }}/"
          languageCode = "en-us"
          title = "${{ env.SITE_TITLE }}"

          [params]
            description = "${{ env.SITE_DESCRIPTION }}"
            github_owner = "$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)"
            github_repo = "$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)"

          [markup]
            [markup.goldmark]
              [markup.goldmark.renderer]
                unsafe = true
          EOF

          # Копируем README.md как главную страницу
          if [ -f "README.md" ]; then
            cp README.md content/_index.md
          fi

          # Копируем другие markdown файлы
          for file in *.md; do
            if [ "$file" != "README.md" ] && [ -f "$file" ]; then
              filename=$(basename -- "$file")
              name="${filename%.*}"
              cp "$file" "content/${name}.md"
            fi
          done

      - name: Build with Hugo
        run: hugo --gc --minify

      - name: Copy CNAME file
        run: |
          if [ -f "CNAME" ]; then
            cp CNAME public/
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4