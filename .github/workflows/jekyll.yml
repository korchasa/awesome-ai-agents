name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      site_title:
        description: 'Site title'
        required: false
        default: 'Awesome AI Agents'
        type: string
      site_description:
        description: 'Site description'
        required: false
        default: 'A curated list of awesome AI agents and tools'
        type: string
      jekyll_version:
        description: 'Jekyll version'
        required: false
        default: '4.3.2'
        type: string
      template_path:
        description: 'Path to Jekyll templates (custom templates override theme)'
        required: false
        default: '.github/jekyll-templates'
        type: string
      menu_items:
        description: 'Menu items in JSON format (e.g. [{"name":"Home","url":"/"},{"name":"About","url":"/about"}])'
        required: false
        default: '[{"name":"Home","url":"/"},{"name":"GitHub","url":"https://github.com/OWNER/REPO"}]'
        type: string

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      # Use inputs from workflow_dispatch or default values
      JEKYLL_VERSION: ${{ github.event.inputs.jekyll_version || '4.3.2' }}
      SITE_TITLE: ${{ github.event.inputs.site_title || 'Awesome AI Agents' }}
      SITE_DESCRIPTION: ${{ github.event.inputs.site_description || 'A curated list of awesome AI agents and tools' }}
      TEMPLATE_PATH: ${{ github.event.inputs.template_path || '.github/jekyll-templates' }}
      MENU_ITEMS: ${{ github.event.inputs.menu_items || '[{"name":"Home","url":"/"},{"name":"GitHub","url":"https://github.com/OWNER/REPO"}]' }}
      DEFAULT_TEMPLATE_REPO: "korchasa/awesome-ai-agents"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      # Проверяем существование директории с шаблонами
      - name: Check template directory
        id: check_templates
        run: |
          if [ -d "${{ env.TEMPLATE_PATH }}" ]; then
            echo "templates_exist=true" >> $GITHUB_OUTPUT
          else
            echo "templates_exist=false" >> $GITHUB_OUTPUT
            echo "::warning::Template directory ${{ env.TEMPLATE_PATH }} not found. Using theme settings instead."
          fi

      # Если шаблоны не существуют, клонируем репозиторий с шаблонами по умолчанию
      - name: Clone default templates
        if: steps.check_templates.outputs.templates_exist != 'true' && env.TEMPLATE_PATH != ''
        run: |
          git clone --depth 1 https://github.com/${{ env.DEFAULT_TEMPLATE_REPO }} temp_repo
          mkdir -p ${{ env.TEMPLATE_PATH }}
          if [ -d "temp_repo/${{ env.TEMPLATE_PATH }}" ]; then
            cp -r temp_repo/${{ env.TEMPLATE_PATH }}/* ${{ env.TEMPLATE_PATH }}/
          else
            echo "::warning::Default templates not found in ${{ env.DEFAULT_TEMPLATE_REPO }}/${{ env.TEMPLATE_PATH }}. Will use theme settings."
          fi
          rm -rf temp_repo

      # Создаем данные для меню
      - name: Create menu data
        run: |
          # Создаем директорию для данных
          mkdir -p _data

          # Создаем данные для меню
          echo '${{ env.MENU_ITEMS }}' > _data/menu.json

          # Конвертируем JSON в YAML для Jekyll
          echo "menu:" > _data/menu.yml
          cat _data/menu.json | jq -r '.[] | "  - name: \"" + .name + "\"\n    url: \"" + .url + "\""' >> _data/menu.yml

          # Заменяем OWNER/REPO в пунктах меню на реальные значения
          sed -i "s|https://github.com/OWNER/REPO|https://github.com/$(echo $GITHUB_REPOSITORY)|g" _data/menu.yml

      # Создаем конфигурацию Jekyll
      - name: Create Jekyll config
        run: |
          # Создаем _config.yml
          cat > _config.yml << EOF
          title: "${{ env.SITE_TITLE }}"
          description: "${{ env.SITE_DESCRIPTION }}"
          github_owner: "$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)"
          github_repo: "$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)"
          baseurl: "${{ steps.pages.outputs.base_path }}"
          url: "${{ steps.pages.outputs.origin }}"
          EOF

          # Добавляем настройки Jekyll
          cat >> _config.yml << EOF

          # Jekyll settings
          markdown: kramdown
          kramdown:
            input: GFM
            hard_wrap: false

          # Exclude files from processing
          exclude:
            - Gemfile
            - Gemfile.lock
            - node_modules
            - vendor
            - .github
          EOF

          # Создаем Gemfile
          cat > Gemfile << EOF
          source "https://rubygems.org"

          gem "jekyll", "~> ${{ env.JEKYLL_VERSION }}"
          gem "github-pages", group: :jekyll_plugins
          gem "webrick", "~> 1.7"
          EOF

      # Подготавливаем Jekyll сайт с пользовательскими шаблонами (если есть)
      - name: Prepare custom templates
        if: steps.check_templates.outputs.templates_exist == 'true'
        run: |
          # Создаем структуру директорий Jekyll
          mkdir -p _layouts _includes assets/css _posts

          # Копируем шаблоны из указанной директории
          if [ -d "${{ env.TEMPLATE_PATH }}/_layouts" ]; then
            cp -r ${{ env.TEMPLATE_PATH }}/_layouts/* _layouts/
          fi

          if [ -d "${{ env.TEMPLATE_PATH }}/_includes" ]; then
            cp -r ${{ env.TEMPLATE_PATH }}/_includes/* _includes/
          fi

          if [ -d "${{ env.TEMPLATE_PATH }}/assets" ]; then
            cp -r ${{ env.TEMPLATE_PATH }}/assets/* assets/
          fi

      # Создаем файл для настройки CSS темы
      - name: Create theme CSS customization
        run: |
          mkdir -p assets/css
          cat > assets/css/style.scss << EOF
          ---
          ---

          @import "{{ site.theme }}";

          // Добавляем стили для меню
          .main-nav {
            margin: 1rem 0;
          }
          .main-nav ul {
            display: flex;
            list-style: none;
            padding: 0;
            margin: 0;
            flex-wrap: wrap;
          }
          .main-nav li {
            margin-right: 1.5rem;
            margin-bottom: 0.5rem;
          }
          .main-nav a {
            text-decoration: none;
            font-weight: 500;
            padding: 0.3rem 0;
            border-bottom: 2px solid transparent;
            transition: border-color 0.2s;
          }
          .main-nav a:hover {
            border-color: currentColor;
          }
          @media (max-width: 600px) {
            .main-nav ul {
              flex-direction: column;
            }
            .main-nav li {
              margin-bottom: 0.5rem;
            }
          }
          EOF

      # Создаем файл для настройки макета темы, если не существуют пользовательские шаблоны
      - name: Create theme layout customization
        if: steps.check_templates.outputs.templates_exist != 'true'
        run: |
          mkdir -p _layouts _includes

          # Создаем шаблон для меню
          cat > _includes/menu.html << EOF
          <nav class="main-nav">
            <ul>
              {% for item in site.data.menu %}
                <li><a href="{{ item.url }}" {% if item.url contains "http" %}target="_blank"{% endif %}>{{ item.name }}</a></li>
              {% endfor %}
            </ul>
          </nav>
          EOF

          # Создаем шаблон для пользовательского заголовка
          cat > _includes/custom_head.html << EOF
          <!-- Пользовательские метатеги и стили -->
          EOF

          # Создаем шаблон для пользовательского футера
          cat > _includes/custom_footer.html << EOF
          <!-- Пользовательский футер -->
          <p>&copy; {{ site.time | date: "%Y" }} <a href="https://github.com/{{ site.github_owner }}/{{ site.github_repo }}" target="_blank">{{ site.title }}</a></p>
          EOF

      # Копируем контент
      - name: Copy content
        run: |
          # Копируем README.md как главную страницу
          if [ -f "README.md" ]; then
            cp README.md index.md
            # Добавляем front matter
            sed -i '1i---\nlayout: home\ntitle: Home\n---\n' index.md
          fi

          # Копируем другие markdown файлы
          for file in *.md; do
            if [ "$file" != "README.md" ] && [ "$file" != "index.md" ] && [ -f "$file" ]; then
              filename=$(basename -- "$file")
              name="${filename%.*}"
              cp "$file" "${name}.md"
              # Добавляем front matter
              sed -i '1i---\nlayout: page\ntitle: '"$name"'\n---\n' "${name}.md"
            fi
          done

      # Устанавливаем зависимости и собираем сайт
      - name: Build with Jekyll
        run: |
          bundle install
          bundle exec jekyll build
        env:
          JEKYLL_ENV: production

      - name: Copy CNAME file
        run: |
          if [ -f "CNAME" ]; then
            cp CNAME _site/
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4